#!/usr/bin/env python3
import argparse
import subprocess
import sys

debug = False
# debug = True

def call(args):
    try:
        if debug:
            print(args)
        return subprocess.call(args)
    except:
        pass

def nix_repl(args, unknown):
    return call(['nix-repl', '<nixpkgs>'] + unknown)

def nix_shell(args, unknown):
    command = ['nix-shell']
    if args.with_gc_root:
        command += ['--indirect', '--add-root', '.gcroots/result']
    command += unknown
    return call(command)

def nix_build(args, unknown):
    file = [args.file] if args.file is not None else []

    attrs = []
    for a in args.attr:
        attrs.append('-A')
        attrs.append(a)

    return call(['nix-build'] + file + attrs + unknown)

def nix_prefetch_github(args, unknown):
    url = 'https://github.com/{}/{}/archive/{}.tar.gz'.format(args.owner, args.repo, args.rev)
    return call(['nix-prefetch-url', '--unpack', url] + unknown)

def nix_prefetch_url(args, unknown):
    return call(['nix-prefetch-url', args.url] + unknown)

def nix_channel_list(args, unknown):
    return call(['nix-channel', '--list'] + unknown)

def nix_channel_update(args, unknown):
    return call(['nix-channel', '--update'] + unknown)

def nix_channel_rollback(args, unknown):
    return call(['nix-channel', '--rollback'] + unknown)

parser = argparse.ArgumentParser(description='A Nix command-line wrapper')
subparsers = parser.add_subparsers()

parser_repl = subparsers.add_parser('repl', help='Invoke nix-repl')
parser_repl.set_defaults(func=nix_repl)

parser_shell = subparsers.add_parser('shell', help='Invoke nix-shell')
parser_shell.add_argument('--with-gc-root', action='store_true', help='Register a gc root for the shell. Roots are added to ./.gcroots/ directory')
parser_shell.set_defaults(func=nix_shell)

parser_build = subparsers.add_parser('build', help='Invoke nix-build')
parser_build.add_argument('-f', '--file', dest='file', help='File to build')
parser_build.add_argument('attr', nargs='*', help='Attributes to build')
parser_build.set_defaults(func=nix_build)

parser_prefetch = subparsers.add_parser('prefetch', help='Prefetch from various sources')
prefetch_parsers = parser_prefetch.add_subparsers()

parser_prefetch_github = prefetch_parsers.add_parser('github', help='Prefetch from GitHub')
parser_prefetch_github.add_argument('owner', type=str, help='Owner of GitHub repo')
parser_prefetch_github.add_argument('repo', type=str, help='Repo name')
parser_prefetch_github.add_argument('rev', type=str, help='Revision')
parser_prefetch_github.set_defaults(func=nix_prefetch_github)

parser_prefetch_url = prefetch_parsers.add_parser('url', help='Prefetch URL')
parser_prefetch_url.add_argument('url', type=str, help='URL to prefetch')
parser_prefetch_url.set_defaults(func=nix_prefetch_url)

parser_channel = subparsers.add_parser('channel', help='Control channels')
channel_parsers = parser_channel.add_subparsers()

channel_list = channel_parsers.add_parser('list', help='List all channels')
channel_list.set_defaults(func=nix_channel_list)
channel_update = channel_parsers.add_parser('update', help='Update channels')
channel_update.set_defaults(func=nix_channel_update)
channel_rollback = channel_parsers.add_parser('rollback', help='Rollback to previous channel version')
channel_rollback.set_defaults(func=nix_channel_rollback)

args, unknown = parser.parse_known_args()
if debug:
    print(args, unknown)
if hasattr(args, 'func'):
    sys.exit(args.func(args, unknown))
else:
    parser.print_help()
