#+PROPERTY: header-args :noweb yes
Hi there! That's my dotfiles.

This repository contains configuration for three hosts:
- omicron — my main laptop which runs NixOS
- pie — my home server RPi running NixOS (see [[./pie.org][pie.org]])
- AlexeyShmalko — my work laptop running Ubuntu (ugh, corporate policies) with home-manager on top

Most of config files are generated by [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] from org files in this repository (yes, including this very same ~README.org~). That's [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] applied to dotfiles.

This file contains NixOS configuration for omicron, and common home-manager configuration between omicron and AlexeyShmalko. (I try to keep repetition to minimum, but some is inevitable.)

[[./work.org][work.org]] file contains home-manager configuration specific for AlexeyShmalko.

[[./pie.org][pie.org]] is a separate NixOS config for pie host.

For Emacs configuration, see [[./emacs.org][emacs.org]].

To generate actual nix files, you can open this file in Emacs, and execute =M-x org-babel-tangle=. Or from command line with the following command.

#+begin_src sh
emacs README.org --batch -f org-babel-tangle
#+end_src

#+RESULTS:

Note that you need to patch org-babel to correctly generate configs. See [[file:emacs.org::*Patch ob-tangle][Patch ob-tangle]] in Emacs config.

I keep generated files in sync with org files (so this repo is a valid Nix Flake), but they are not worth looking at—you'll have much better time reading this doc instead.

Pieces not (yet) covered in org files are:
- awesome wm configuration at =.config/awesome/=
- scripts at =bin/=

* Top-level
** Flake
This repository is nix flakes–compatible.

The following goes to ~flake.nix~ file.
#+begin_src nix :tangle flake.nix :noweb no-export :padline no
#
# This file is auto-generated from "README.org"
#
{
  description = "rasendubi's packages and NixOS/home-manager configurations";

  inputs = {
    nixpkgs = {
      type = "github";
      owner = "NixOS";
      repo = "nixpkgs-channels";
      ref = "nixpkgs-unstable";
    };

    <<flake-inputs>>
  };

  outputs = { self, ... }@inputs:
    let
      # Flakes are evaluated hermetically, thus are unable to access
      # host environment (including looking up current system).
      #
      # That's why flakes must explicitly export sets for each system
      # supported.
      systems = ["x86_64-linux" "aarch64-linux"];

      # genAttrs applies f to all elements of a list of strings, and
      # returns an attrset { name -> result }
      #
      # Useful for generating sets for all systems or hosts.
      genAttrs = list: f: inputs.nixpkgs.lib.genAttrs list f;

      # Generate pkgs set for each system. This takes into account my
      # nixpkgs config (allowUnfree) and my overlays.
      pkgsBySystem =
        let mkPkgs = system: import inputs.nixpkgs {
              inherit system;
              overlays = self.overlays.${system};
              config = { allowUnfree = true; };
            };
        in genAttrs systems mkPkgs;

      # genHosts takes an attrset { name -> options } and calls mkHost
      # with options+name. The result is accumulated into an attrset
      # { name -> result }.
      #
      # Used in NixOS and Home Manager configurations.
      genHosts = hosts: mkHost:
        genAttrs (builtins.attrNames hosts) (name: mkHost ({ inherit name; } // hosts.${name}));

      # merges a list of attrsets into a single attrset
      mergeSections = inputs.nixpkgs.lib.foldr inputs.nixpkgs.lib.mergeAttrs {};

    in mergeSections [
      <<flake-outputs-nixos>>
      <<flake-outputs-home-manager>>
      <<flake-outputs-packages>>
      <<flake-outputs-overlays>>
    ];
}
#+end_src

Nix flakes are still an experimental feature, so you need the following in NixOS configuration to enable it.
#+name: nixos-section
#+begin_src nix
{
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };
}
#+end_src

For non-NixOS system, install ~nixFlakes~ and put the following into =~/.config/nix/nix.conf=.
#+begin_src conf
experimental-features = nix-command flakes
#+end_src

** NixOS
Expose NixOS configurations.
#+name: flake-outputs-nixos
#+begin_src nix
(let
  nixosHosts = {
    omicron = { system = "x86_64-linux";  config = ./nixos-config.nix; };

    # pie uses a separate config as it is very different
    # from other hosts.
    pie =     { system = "aarch64-linux"; config = ./pie.nix; };
  };

  mkNixosConfiguration = { name, system, config }:
    let pkgs = pkgsBySystem.${system};
    in inputs.nixpkgs.lib.nixosSystem {
      inherit system;
      modules = [
        { nixpkgs = { inherit pkgs; }; }
        (import config)
      ];
      specialArgs = { inherit name inputs; };
    };

in {
  nixosConfigurations = genHosts nixosHosts mkNixosConfiguration;
})
#+end_src
** Home manager
Add home-manager to flake inputs.
#+name: flake-inputs
#+begin_src nix
home-manager = {
  type = "github";
  owner = "rycee";
  repo = "home-manager";
  ref = "bqv-flakes";
  inputs.nixpkgs.follows = "nixpkgs";
};
#+end_src

Expose home-manager configurations.
#+name: flake-outputs-home-manager
#+begin_src nix
(let
  homeManagerHosts = {
    AlexeyShmalko = {
      system = "x86_64-linux";
      config = ./work.nix;
      username = "rasen";
      homeDirectory = "/home/rasen";
    };
  };

  mkHomeManagerConfiguration = { system, name, config, username, homeDirectory }:
    let pkgs = pkgsBySystem.${system};
    in inputs.home-manager.lib.homeManagerConfiguration {
      inherit system pkgs username homeDirectory;
      configuration = { ... }: {
        nixpkgs.config.allowUnfree = true;
        nixpkgs.overlays = self.overlays.${system};
        imports = [
          self.lib.home-manager-common

          (import config)
        ];
      };
    };

in {
  # Re-export common home-manager configuration to be reused between
  # NixOS module and standalone home-manager config.
  lib.home-manager-common = { lib, pkgs, config, ... }: {
    imports = [
      <<home-manager-section>>
    ];
  };
  homeManagerConfigurations = genHosts homeManagerHosts mkHomeManagerConfiguration;
})
#+end_src

Integrate home-manager module into NixOS.
#+name: nixos-section
#+begin_src nix
{
  imports = [inputs.home-manager.nixosModules.home-manager];
  home-manager = {
    useUserPackages = true;
    useGlobalPkgs = true;
    users.rasen = inputs.self.lib.home-manager-common;
  };
}
#+end_src

** Packages
Generate packages set for each supported system.
#+name: flake-outputs-packages
#+begin_src nix
(let
  mkPackages = system:
    let
      pkgs = pkgsBySystem.${system};
    in
      mergeSections [
        <<flake-packages>>
      ];

in {
  packages = genAttrs systems mkPackages;
})
#+end_src
** Overlays
Generate overlays for all supported systems.
#+name: flake-outputs-overlays
#+begin_src nix
(let
  mkOverlays = system: [
    # mix-in all local packages, so they are available as pkgs.${packages-name}
    (final: prev: self.packages.${system})

    <<flake-overlays>>
  ];
in {
  overlays = genAttrs systems mkOverlays;
})
#+end_src

~<<flake-overlays>>~ are defined elsewhere.
* NixOS
** General
I'm a [[http://nixos.org/][NixOS]] user. What's cool about it is that I can describe all my system configuration in one file (almost). I can execute a single command and have a system with the same software, system settings, etc.

An outline of configuration looks like this:

#+begin_src nix :tangle nixos-config.nix :noweb no-export :padline no
#
# This file is auto-generated from "README.org"
#
{ name, config, pkgs, lib, inputs, ... }:
let
  machine-config = lib.getAttr name {
    omicron = [
      <<machine-omicron>>
    ];
  };

in
{
  imports = [
    {
      nixpkgs.config.allowUnfree = true;

      # The NixOS release to be compatible with for stateful data such as databases.
      system.stateVersion = "19.09";
    }

    <<nixos-section>>
  ] ++ machine-config;
}
#+end_src

This =<<nixos-section>>= is replaced by other parts of this doc.

** Re-expose nixpkgs
#+name: nixos-section
#+begin_src nix
{
  # for compatibility with nix-shell, nix-build, etc.
  environment.etc.nixpkgs.source = inputs.nixpkgs;
  nix.nixPath = ["nixpkgs=/etc/nixpkgs"];

  # register self and nixpkgs as flakes for quick access
  nix.registry = {
    self.flake = inputs.self;

    nixpkgs = {
      from = { id = "nixpkgs"; type = "indirect"; };
      flake = inputs.nixpkgs;
    };
  };
}
#+end_src

Same but for Home Manager–managed host.
#+name: home-manager-section
#+begin_src nix
{
  home.file."nixpkgs".source = inputs.nixpkgs;
  systemd.user.sessionVariables.NIX_PATH = lib.mkForce "nixpkgs=$HOME/nixpkgs\${NIX_PATH:+:}$NIX_PATH";

  xdg.configFile."nix/registry.json".text = builtins.toJSON {
    version = 2;
    flakes = [
      {
        from = { id = "self"; type = "indirect"; };
        to = ({
          type = "path";
          path = inputs.self.outPath;
        } // lib.filterAttrs
          (n: v: n == "lastModified" || n == "rev" || n == "revCount" || n == "narHash")
          inputs.self);
      }
      {
        from = { id = "nixpkgs"; type = "indirect"; };
        to = ({
          type = "path";
          path = inputs.nixpkgs.outPath;
        } // lib.filterAttrs
          (n: v: n == "lastModified" || n == "rev" || n == "revCount" || n == "narHash")
          inputs.nixpkgs);
      }
    ];
  };
}
#+end_src
** Users
I'm the only user of the system:

#+name: nixos-section
#+begin_src nix
{
  users.extraUsers.rasen = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "users" "wheel" "input" ];
    initialPassword = "HelloWorld";
  };
  nix.trustedUsers = ["rasen"];
}
#+end_src

=initialPassword= is used only first time when user is created. It must be changed as soon as possible with =passwd=.

** Machines
#+name: Machines section
I currently have only one machine.
*** omicron
This is my small Dell XPS 13.
#+name: machine-omicron
#+begin_src nix
{
  imports = [
    (import "${inputs.nixos-hardware}/dell/xps/13-9360")
    inputs.nixpkgs.nixosModules.notDetected
  ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  nix.maxJobs = lib.mkDefault 4;

  # powerManagement.cpuFreqGovernor = "powersave";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
}
#+end_src

~inputs.nixos-hardware~ comes from the following flake input.
#+name: flake-inputs
#+begin_src nix
nixos-hardware = {
  type = "github";
  owner = "NixOS";
  repo = "nixos-hardware";
  flake = false;
};
#+end_src

LVM on LUKS setup for disk encryption.
#+name: machine-omicron
#+begin_src nix
{
  boot.initrd.luks.devices = {
    root = {
      device = "/dev/disk/by-uuid/8b591c68-48cb-49f0-b4b5-2cdf14d583dc";
      preLVM = true;
    };
  };
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/BA72-5382";
    fsType = "vfat";
  };
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/434a4977-ea2c-44c0-b363-e7cf6e947f00";
    fsType = "ext4";
    options = [ "noatime" "nodiratime" "discard" ];
  };
  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/8bfa73e5-c2f1-424e-9f5c-efb97090caf9";
    fsType = "ext4";
    options = [ "noatime" "nodiratime" "discard" ];
  };
  swapDevices = [
    { device = "/dev/disk/by-uuid/26a19f99-4f3a-4bd5-b2ed-359bed344b1e"; }
  ];
}
#+end_src

Clickpad:
#+name: machine-omicron
#+begin_src nix
{
  services.xserver.libinput = {
    enable = true;
    accelSpeed = "0.7";
  };
}
#+end_src
** Bluetooth
I have a bluetooth headset, so this enables bluetooth audio in NixOS.

#+name: nixos-section
#+begin_src nix
  {
    hardware.bluetooth.enable = true;
    hardware.pulseaudio = {
      enable = true;

      # NixOS allows either a lightweight build (default) or full build
      # of PulseAudio to be installed.  Only the full build has
      # Bluetooth support, so it must be selected here.
      package = pkgs.pulseaudioFull;
    };
  }
#+end_src
** NTFS
Install ntfs-3g to mount ntfs volumes in read-write mode.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.ntfs3g
  ];
}
#+end_src
* Local packages
As a responsible NixOS user, I refuse to install software blindly with =sudo make install=. That's why I must write my own nix-expressions.
** Sandbox
Build all packages in sandbox:
#+name: nixos-section
#+begin_src nix
{
  nix.useSandbox = true;
}
#+end_src
** Naga
This is an integration package for Razer Naga Chroma and my awesome wm setup.
#+name: flake-packages
#+begin_src nix
{
  naga = pkgs.callPackage ./naga { };
}
#+end_src

Go install it right away:
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [ pkgs.naga ];
}
#+end_src
** Custom Input font
I like the following settings more than defaults. I also need a custom four-style family because Emacs confuses regular/medium weight otherwise. Use link specified in ~requireFile~ to download the font.
#+DOWNLOADED: screenshot @ 2020-04-09 22:27:21
#+ATTR_ORG: :width 360
[[file:./images/20200409192721-screenshot.png]]

#+name: flake-packages
#+begin_src nix
{
  # note it's a new attribute and does not override old one
  input-mono = (pkgs.input-fonts.overrideAttrs (old: {
    src = pkgs.requireFile {
      name = "Input-Font.zip";
      url = "https://input.fontbureau.com/download/index.html?customize&fontSelection=fourStyleFamily&regular=InputMonoNarrow-Regular&italic=InputMonoNarrow-Italic&bold=InputMonoNarrow-Bold&boldItalic=InputMonoNarrow-BoldItalic&a=0&g=0&i=topserif&l=serifs_round&zero=0&asterisk=height&braces=straight&preset=default&line-height=1.2&email=";
      sha256 = "0nn41w2b6jvsbr3r4lfy4p8w2ssjmgdjzd1pbj7p0vmawjpvx2w8";
    };
    outputHash = "1w2i660dg04nyc6fc6r6sd3pw53h8dh8yx4iy6ccpii9gwjl9val";
  }));
}
#+end_src
** Online banking
My bank uses a two-part websigner. The first part is a browser extension (does not require additional setup) and the second part is a native host application companion (it is installed here).

Pack native messaging host:
#+name: flake-packages
#+begin_src nix
(let
  websigner =
    { stdenv
    , fetchurl
    , autoPatchelfHook
    , gtk2
    , glib
    , pcsclite
    }:
    stdenv.mkDerivation {
      pname = "procreditbank-websigner";
      version = "2020-01-20";

      src = fetchurl {
        url = "https://ibank.procreditbank.com.ua/websigner-linux.bin";
        sha256 = "1bm88jg7nhgrmc0q5hv35hgv4nc0d15ihl0acrhf6x5f7wv4pszv";
      };

      nativeBuildInputs = [ autoPatchelfHook ];

      buildInputs = [ gtk2 glib pcsclite ];

      unpackCmd = ''
        sh $src --extract
      '';

      dontConfigure = true;

      dontBuild = true;

      installPhase = ''
        mkdir -p $out/bin
        mkdir -p $out/lib/websigner/hosts/firefox
        mkdir -p $out/lib/websigner/hosts/chromium

        install -m 555 x86_64-linux/npwebsigner.so $out/lib/websigner
        install -m 777 x86_64-linux/nmwebsigner $out/lib/websigner

        sed "s|PLUGIN_PATH|$out/lib/websigner/nmwebsigner|" com.bifit.websigner-mozilla.json > $out/lib/websigner/hosts/firefox/com.bifit.websigner.json
        sed "s|PLUGIN_PATH|$out/lib/websigner/nmwebsigner|" com.bifit.websigner-chrome.json > $out/lib/websigner/hosts/chromium/com.bifit.websigner.json

        mkdir -p $out/lib/mozilla/native-messaging-hosts
        ln -s $out/lib/websigner/hosts/firefox/*.json $out/lib/mozilla/native-messaging-hosts
      '';
    };
in {
  procreditbank-websigner = pkgs.callPackage websigner { };
})
#+end_src

Override Firefox to use websigner.
#+name: flake-overlays
#+begin_src nix
(final: prev: {
  firefox = prev.firefox.override {
    extraNativeMessagingHosts = [ final.procreditbank-websigner ];
  };
})
#+end_src
* Emacs
I use emacs-27 from [[https://github.com/nix-community/emacs-overlay][emacs-overlay]].
#+name: flake-inputs
#+begin_src nix
emacs-overlay = {
  type = "github";
  owner = "nix-community";
  repo = "emacs-overlay";
};
#+end_src

Use overlay (goes to ~flake-overlays~ section).
#+name: flake-overlays
#+begin_src nix
inputs.emacs-overlay.overlay
#+end_src

Expose Emacs with my packages as a top-level package.
#+name: flake-packages
#+begin_src nix
(let
  emacs-base = pkgs.emacsGit;
  # emacs = pkgs.emacsUnstable;
  # emacs = pkgs.emacs.override {
  #   # Build emacs with proper imagemagick support.
  #   # See https://github.com/NixOS/nixpkgs/issues/70631#issuecomment-570085306
  #   imagemagick = pkgs.imagemagickBig;
  # };
  emacs-packages = (epkgs:
    (with epkgs.melpaPackages; [

      aggressive-indent
      atomic-chrome
      avy
      beacon
      blacken
      cider
      clojure-mode
      cmake-mode
      color-identifiers-mode
      company
      company-box
      company-lsp
      company-org-roam
      counsel
      counsel-projectile
      diff-hl
      diminish
      direnv
      dockerfile-mode
      doom-modeline
      dtrt-indent
      edit-indirect
      el-patch
      elpy
      epresent
      evil
      evil-collection
      evil-magit
      evil-numbers
      evil-org
      evil-surround
      evil-swap-keys
      fish-mode
      flycheck
      flycheck-inline
      flycheck-jest
      flycheck-rust
      forth-mode
      gcmh
      general
      gitconfig-mode
      go-mode
      google-translate
      graphviz-dot-mode
      groovy-mode
      haskell-mode
      imenu-list
      ivy
      ivy-bibtex
      jinja2-mode
      js2-mode
      json-mode
      ledger-mode
      lispyville
      lsp-haskell
      lsp-mode
      lsp-ui
      lua-mode
      magit
      markdown-mode
      mbsync
      modus-operandi-theme
      monokai-theme
      nix-mode
      nix-sandbox
      notmuch
      org-cliplink
      org-download
      org-drill
      org-ref
      org-roam
      org-roam-bibtex
      org-super-agenda
      paren-face
      php-mode
      pip-requirements
      plantuml-mode
      prettier-js
      projectile
      protobuf-mode
      psc-ide
      purescript-mode
      py-autopep8
      racer
      restclient
      rjsx-mode
      rust-mode
      smex
      spaceline
      terraform-mode
      tide
      typescript-mode
      use-package
      visual-fill-column
      vue-mode
      w3m
      web-mode
      wgrep
      which-key
      whitespace-cleanup-mode
      writegood-mode
      yaml-mode
      yasnippet

    ]) ++
    [
      epkgs.orgPackages.org-plus-contrib
      epkgs.elpaPackages.adaptive-wrap

      pkgs.ycmd
      pkgs.notmuch
      pkgs.w3m
      pkgs.imagemagick
      pkgs.shellcheck

      (pkgs.python3.withPackages (pypkgs: [
        pypkgs.autopep8
        pypkgs.black
        pypkgs.flake8
        pypkgs.mypy
        pypkgs.pylint
        pypkgs.virtualenv
      ]))

      (pkgs.aspellWithDicts (dicts: with dicts; [en en-computers en-science ru uk]))

      # latex for displaying fragments in org-mode
      (pkgs.texlive.combine {
        inherit (pkgs.texlive) scheme-small dvipng dvisvgm mhchem ;
      })
    ]
  );

  emacs-final = (pkgs.emacsPackagesGen emacs-base).emacsWithPackages emacs-packages;

 in {
   my-emacs = emacs-final // {
     base = emacs-base;
     packages = emacs-packages;
   };
 })
#+end_src

Install Emacs with Home manager
#+name: home-manager-section
#+begin_src nix
{
  programs.emacs = {
    enable = true;
    package = pkgs.my-emacs.base;
    extraPackages = pkgs.my-emacs.packages;
  };
  services.emacs.enable = true;

  # fonts used by emacs
  home.packages = [
    pkgs.input-mono
    pkgs.libertine
  ];
}
#+end_src

For the main emacs configuration, check [[./emacs.org][emacs.org]] file.
* Services
** VPN
#+name: nixos-section
#+begin_src nix
{
  services.openvpn.servers.nano-vpn = {
    config = ''
      config /root/openvpn/nano-vpn.ovpn
    '';
  };
}
#+end_src
** NetworkManager
#+name: nixos-section
#+begin_src nix
{
  networking = {
    hostName = name;

    networkmanager.enable = true;

    # disable wpa_supplicant
    wireless.enable = false;
  };

  users.extraUsers.rasen.extraGroups = [ "networkmanager" ];
}
#+end_src

Install network manager applet for user.
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [pkgs.networkmanagerapplet];
}
#+end_src
** Avahi
#+name: nixos-section
#+begin_src nix
{
  services.avahi = {
    enable = true;
    interfaces = [];
    openFirewall = false;
  };
}
#+end_src
** PulseAudio
Use pulseaudio (multiple sound sinks, skype calls).

Also, Pulseaudio is a requirement for Firefox Quantum.
#+name: nixos-section
#+begin_src nix
{
  hardware.pulseaudio = {
    enable = true;
    support32Bit = true;
  };

}
#+end_src

=pavucontrol= is PulseAudio Volume Control—a nice utility for controlling pulseaudio settings.
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [ pkgs.pavucontrol ];
}
#+end_src
** Locate
Update [[https://linux.die.net/man/1/locate][locate]] database daily.
#+name: nixos-section
#+begin_src nix
{
  services.locate = {
    enable = true;
    localuser = "rasen";
  };
}
#+end_src
** SSH
#+name: nixos-section
#+begin_src nix
{
  services.openssh = {
    enable = true;
    passwordAuthentication = false;
  };
}
#+end_src
*** Mosh
[[https://mosh.mit.edu/][Mosh (mobile shell)]] is a cool addition to ssh.
#+name: nixos-section
#+begin_src nix
{
  programs.mosh.enable = true;
}
#+end_src
** Gitolite
#+name: nixos-section
#+begin_src nix
{
  services.gitolite = {
    enable = true;
    user = "git";
    adminPubkey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHH15uiQw3jBbrdlcRb8wOr8KVltuwbHP/JOFAzXFO1l/4QxnKs6Nno939ugULM7Lu0Vx5g6FreuCOa2NMWk5rcjIwOzjrZnHZ7aoAVnE7H9scuz8NGnrWdc1Oq0hmcDxdZrdKdB6CPG/diGWNZy77nLvz5JcX1kPLZENPeApCERwR5SvLecA4Es5JORHz9ssEcf8I7VFpAebfQYDu+VZZvEu03P2+5SXv8+5zjiuxM7qxzqRmv0U8eftii9xgVNC7FaoRBhhM7yKkpbnqX7IeSU3WeVcw4+d1d8b9wD/sFOyGc1xAcvafLaGdgeCQGU729DupRRJokpw6bBRQGH29 rasen@omicron";
  };
}
#+end_src
** dnsmasq
Use [[http://www.thekelleys.org.uk/dnsmasq/doc.html][dnsmasq]] as a DNS cache.

#+name: nixos-section
#+begin_src nix
{
  services.dnsmasq = {
    enable = true;

    # These are used in addition to resolv.conf
    servers = [
      "8.8.8.8"
      "8.8.4.4"
    ];

    extraConfig = ''
      listen-address=127.0.0.1
      cache-size=1000

      no-negcache
    '';
  };
}
#+end_src
** Syncthing
I use Syncthing to sync my org-mode files to my phone.

#+name: nixos-section
#+begin_src nix
{
  services.syncthing = {
    enable = true;
    user = "rasen";
    dataDir = "/home/rasen/.config/syncthing";
    configDir = "/home/rasen/.config/syncthing";
    openDefaultPorts = true;
  };
}
#+end_src
** Firewall
Enable firewall. This blocks all ports (for ingress traffic) and pings.

#+name: nixos-section
#+begin_src nix
{
  networking.firewall = {
    enable = true;
    allowPing = false;

    connectionTrackingModules = [];
    autoLoadConntrackHelpers = false;
  };
}
#+end_src
** Development
#+name: nixos-section
#+begin_src nix
{
  virtualisation.docker.enable = true;
}
#+end_src
** Backup
I use borg for backups.

#+name: machine-omicron
#+begin_src nix
(let
  commonOptions = {
    repo = "borg@10.13.0.3:.";
    encryption.mode = "keyfile-blake2";
    encryption.passCommand = "cat /root/secrets/borg";
    compression = "auto,lzma,9";
    doInit = false;
    environment = { BORG_RSH = "ssh -i /root/.ssh/borg"; };
    # UTC timestamp
    dateFormat = "-u +%Y-%m-%dT%H:%M:%S";
  };
in {
  services.borgbackup.jobs."all" = commonOptions // {
    archiveBaseName = "${config.networking.hostName}";
    paths = [
      "/var/lib/gitolite/"
      "/home/rasen/backup/"
      "/home/rasen/.ssh/"
      "/home/rasen/.gnupg/"
      "/home/rasen/.password-store/"
      "/home/rasen/dotfiles/"
      "/home/rasen/org/"

      # Mail
      "/home/rasen/Mail/"
      "/home/rasen/.mbsync/"
    ];
    exclude = [
      # Scanning notmuch takes too much time and doesn't make much
      # sense as it is easily replicable
      "/home/rasen/Mail/.notmuch"
    ];
  };

  # Start backup on boot if missed one while laptop was off
  systemd.timers.borgbackup-job-all.timerConfig = {
    Persistent = true;
  };

  # Require VPN connection for repo to be reachable
  systemd.services.borgbackup-job-all = {
    requires = ["openvpn-nano-vpn.service"];
  };
})
#+end_src
** ADB
I need to access my Android device.
#+name: nixos-section
#+begin_src nix
{
  services.udev.packages = [ pkgs.android-udev-rules ];
  programs.adb.enable = true;
  users.users.rasen.extraGroups = ["adbusers"];
}
#+end_src
** fwupd
fwupd is a service that allows applications to update firmware.
#+name: nixos-section
#+begin_src nix
{
  services.fwupd.enable = true;
}
#+end_src

Execute the following command to update firmware.
#+begin_src sh
fwupdmgr get-updates
#+end_src
** lorri + direnv
#+name: home-manager-section
#+begin_src nix
{
  services.lorri.enable = true;
  programs.direnv.enable = true;
}
#+end_src
* Mail setup
#+name: home-manager-section
#+begin_src nix
{
  accounts.email = {
    maildirBasePath = "Mail";
  };
  programs.mbsync = {
    enable = true;
    extraConfig = lib.mkBefore ''
      MaildirStore local
      Path ~/Mail/
      Inbox ~/Mail/INBOX
      SubFolders Verbatim
    '';
  };

  programs.notmuch = {
    enable = true;
    new.ignore = [
      ".mbsyncstate"
      ".mbsyncstate.lock"
      ".mbsyncstate.new"
      ".mbsyncstate.journal"
      ".uidvalidity"
      "dovecot-uidlist"
      "dovecot-keywords"
      "dovecot.index"
      "dovecot.index.log"
      "dovecot.index.log.2"
      "dovecot.index.cache"
      "/^archive/"
    ];
  };

  # My Maildir layout predates home-manager configuration, so I do not
  # use mbsync config generation from home-manager, to keep layout
  # compatible.
  imports =
    let
      emails = [
        { name = "gmail";   email = "rasen.dubi@gmail.com";    path = "Personal"; primary = true; }
        { name = "ps";      email = "ashmalko@doctoright.org"; path = "protocolstandard"; }
        { name = "egoless"; email = "me@egoless.tech";         path = "egoless"; }
      ];
      mkGmailBox = { name, email, path, ... }@all: {
        accounts.email.accounts.${name} = {
          realName = "Alexey Shmalko";
          address = email;
          flavor = "gmail.com";

          passwordCommand = "pass imap.gmail.com/${email}";
          maildir.path = path;

          msmtp.enable = true;
          notmuch.enable = true;
        } // (removeAttrs all ["name" "email" "path"]);

        programs.mbsync.extraConfig = ''
          IMAPAccount ${name}
          Host imap.gmail.com
          User ${email}
          PassCmd "pass imap.gmail.com/${email}"
          SSLType IMAPS
          CertificateFile /etc/ssl/certs/ca-certificates.crt

          IMAPStore ${name}-remote
          Account ${name}

          Channel sync-${name}-all
          Master :${name}-remote:"[Gmail]/All Mail"
          Slave :local:${path}/all
          Create Both
          SyncState *

          Channel sync-${name}-spam
          Master :${name}-remote:"[Gmail]/Spam"
          Slave :local:${path}/spam
          Create Both
          SyncState *

          Channel sync-${name}-sent
          Master :${name}-remote:"[Gmail]/Sent Mail"
          Slave :local:${path}/sent
          Create Both
          SyncState *

          Group sync-${name}
          Channel sync-${name}-all
          Channel sync-${name}-spam
          Channel sync-${name}-sent
        '';
      };
    in map mkGmailBox emails;
}
#+end_src
* Environment
** General
I definitely use X server:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.enable = true;
}
#+end_src

Use English as my only supported locale:
#+name: nixos-section
#+begin_src nix
{
  i18n.supportedLocales = [ "en_US.UTF-8/UTF-8" ];
}
#+end_src

Setup timezone:
#+name: nixos-section
#+begin_src nix
{
  time.timeZone = "Europe/Kiev";
}
#+end_src
** Login manager / display manager
#+name: nixos-section
#+begin_src nix
{
  services.xserver.displayManager.lightdm.enable = true;
}
#+end_src
** Window manager
I use [[http://awesome.naquadah.org/][awesome wm]]:

#+name: nixos-section
#+begin_src nix
{
  services.xserver.windowManager = {
    awesome = {
      enable = true;
      luaModules = [ pkgs.luaPackages.luafilesystem pkgs.luaPackages.cjson ];
    };
  };
  services.xserver.displayManager.defaultSession = "none+awesome";
}
#+end_src

Disabling xterm makes awesome wm a default choice in slim:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.desktopManager.xterm.enable = false;
}
#+end_src

These packages are used by my awesome wm setup:
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    pkgs.wmname
    pkgs.xclip
    pkgs.escrotum
  ];
}
#+end_src
** Keyboard
*** Layouts
I use English and Ukrainian layouts. I also use Russian symbols, but they are on the third level.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.layout = "us,ua";
  services.xserver.xkbVariant = "workman,";

  # Use same config for linux console
  console.useXkbConfig = true;
}
#+end_src

Map left Caps Lock to Ctrl, and left Ctrl to switch between layout. (Shift-Ctrl triggers Caps Lock function.)

I toggle between them with either Caps Lock, or Menu key---I have two different keyboards, and one doesn't have Menu when Caps Lock is too far on the second. I never use Caps Lock--the feature, so it's nice to have Caps LED indicate alternate layouts.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.xkbOptions = "grp:lctrl_toggle,grp_led:caps,ctrl:nocaps";
}
#+end_src

#+name: home-manager-section
#+begin_src nix
{
  home.keyboard = {
    layout = "us,ua";
    variant = "workman,";
  };
}
#+end_src

Use a slightly customized Workman keyboard layout (more keys on 3rd level).
#+name: home-manager-section
#+begin_src nix
{

  xsession.initExtra = ''
    xkbcomp ${./Xkeymap} $DISPLAY
  '';
}
#+end_src
*** Layout indicator
I use built-in awesome layout indicator. See [[.config/awesome/rc.lua]] for more details.
** Redshift
Redshift adjusts the color temperature of the screen according to the position of the sun.

Blue light blocks [[https://en.wikipedia.org/wiki/Melatonin][melatonin]] (sleep harmone) secretion, so you feel less sleepy when you stare at computer screen.
Redshift blocks some blue light (making screen more red), which should improve melatonin secretion and restore sleepiness (which is a good thing).

#+name: nixos-section
#+begin_src nix
{
  services.redshift = {
    enable = true;
  };
  location.provider = "geoclue2";
}
#+end_src
** Screen brightness
=xbacklight= stopped working recently. =acpilight= is a drop-in replacement.
#+name: nixos-section
#+begin_src nix
{
  hardware.acpilight.enable = true;
  environment.systemPackages = [
    pkgs.acpilight
  ];
  users.extraUsers.rasen.extraGroups = [ "video" ];
}
#+end_src

For Home Manager–managed hosts.
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [pkgs.acpilight];
}
#+end_src
* Look and Feel
** Fonts
I'm not a font guru, so I just stuffed a bunch of random fonts in here.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    fontconfig.enable = true;
    enableFontDir = true;
    enableGhostscriptFonts = false;

    fonts = with pkgs; [
      pkgs.inconsolata
      pkgs.dejavu_fonts
      pkgs.source-code-pro
      pkgs.ubuntu_font_family
      pkgs.unifont
      pkgs.powerline-fonts
      pkgs.terminus_font
    ];
  };
}
#+end_src

For home-manager.
#+name: home-manager-section
#+begin_src nix
{
  fonts.fontconfig.enable = true;
  home.packages = [
    pkgs.inconsolata
    pkgs.dejavu_fonts
    pkgs.source-code-pro
    pkgs.ubuntu_font_family
    pkgs.unifont
    pkgs.powerline-fonts
    pkgs.terminus_font
  ];
}
#+end_src
** Hi-DPI
These are for omicron-only.

#+name: home-manager-section
#+begin_src nix
{
  xresources.properties = {
    "Xft.dpi" = 276;
    "Xcursor.size" = 64;
  };
}
#+end_src

#+name: machine-omicron
#+begin_src nix
{
  console.packages = [
    pkgs.terminus_font
  ];
  console.font = "ter-132n";
}
#+end_src

#+name: machine-omicron
#+begin_src nix
{
  services.xserver.dpi = 276;
}
#+end_src
* Applications
Here go applications (almost) every normal user needs.
** GPG
#+name: nixos-section
#+begin_src nix
{
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
    pinentryFlavor = "qt";
  };

  ## is it no longer needed?
  #
  # systemd.user.sockets.gpg-agent-ssh = {
  #   wantedBy = [ "sockets.target" ];
  #   listenStreams = [ "%t/gnupg/S.gpg-agent.ssh" ];
  #   socketConfig = {
  #     FileDescriptorName = "ssh";
  #     Service = "gpg-agent.service";
  #     SocketMode = "0600";
  #     DirectoryMode = "0700";
  #   };
  # };

  services.pcscd.enable = true;
}
#+end_src
** Yubikey
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.yubikey-manager
    pkgs.yubikey-personalization
    pkgs.yubikey-personalization-gui
  ];

  services.udev.packages = [
    pkgs.yubikey-personalization
    pkgs.libu2f-host
  ];
}
#+end_src
** password-store
Install [[https://www.passwordstore.org/][password-store]] along with [[https://github.com/tadfisher/pass-otp][one-time password extension]].
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    (pkgs.pass.withExtensions (exts: [ exts.pass-otp ]))
  ];
}
#+end_src

Install [[https://github.com/browserpass/browserpass][browserpass]] firefox extension backend.
#+name: home-manager-section
#+begin_src nix
{
  programs.browserpass = {
    enable = true;
    browsers = ["firefox" "chrome"];
  };
}
#+end_src
** KDE apps
I don't use full KDE but some apps are definitely nice.
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    pkgs.gwenview
    pkgs.dolphin
    pkgs.kdeFrameworks.kfilemetadata
    pkgs.filelight
    pkgs.shared_mime_info
  ];
}
#+end_src

KDE apps might have issues with mime types without this:
#+name: nixos-section
#+begin_src nix
{
  environment.pathsToLink = [ "/share" ];
}
#+end_src
** Browsers
Firefox is default; Chrome for backup.
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    pkgs.firefox
    pkgs.google-chrome
  ];
}
#+end_src
** Zathura
[[https://pwmt.org/projects/zathura/][Zathura]] is a cool document viewer with Vim-like bindings.
#+name: home-manager-section
#+begin_src nix
{
  programs.zathura = {
    enable = true;
    options = {
      incremental-search = true;
    };

    # Swap j/k (for Workman layout)
    extraConfig = ''
      map j scroll up
      map k scroll down
    '';
  };
}
#+end_src
** Screen locking
*** Slock
[[http://tools.suckless.org/slock/][Slock]] is a simple X display locker and should probably not crash as xscreensaver does.

Slock tries to disable OOM killer (so the locker is not killed when memory is low) and this requires a suid flag for executable. Otherwise, you get the following message:
#+begin_src fundamental
slock: unable to disable OOM killer. Make sure to suid or sgid slock.
#+end_src

#+name: nixos-section
#+begin_src nix
{
  programs.slock.enable = true;
}
#+end_src
*** xss-lock
[[https://bitbucket.org/raymonad/xss-lock][xss-lock]] is a small utility to plug a screen locker into screen saver extension for X. This automatically activates selected screensaver after a period of user inactivity, or when system goes to sleep.

#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    pkgs.xss-lock
  ];
}
#+end_src
** User applications
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    pkgs.google-play-music-desktop-player
    pkgs.tdesktop # Telegram

    pkgs.mplayer
    pkgs.smplayer

    # Used by naga-awesome wm setup
    pkgs.xdotool
  ];
}
#+end_src
* Development
** Editors
I'm a seasoned Vim user, but I've switched to emacs.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    (pkgs.vim_configurable.override { python3 = true; })
    pkgs.neovim
  ];
}
#+end_src

For Home Manager–managed hosts.
#+name: home-manager-section
#+begin_src nix
{
  home.packages = [
    (pkgs.vim_configurable.override { python3 = true; })
    pkgs.neovim
  ];
}
#+end_src
** rxvt-unicode
I use urxvt as my terminal emulator.
#+name: home-manager-section
#+begin_src nix
{
  programs.urxvt = {
    enable = true;
    iso14755 = false;

    fonts = [
      "-*-terminus-medium-r-normal-*-32-*-*-*-*-*-iso10646-1"
    ];

    scroll = {
      bar.enable = false;
      lines = 65535;
      scrollOnOutput = false;
      scrollOnKeystroke = true;
    };
    extraConfig = {
      "loginShell" = "true";
      "urgentOnBell" = "true";
      "secondaryScroll" = "true";

      # Molokai color theme
      "background" = "#101010";
      "foreground" = "#d0d0d0";
      "color0" = "#101010";
      "color1" = "#960050";
      "color2" = "#66aa11";
      "color3" = "#c47f2c";
      "color4" = "#30309b";
      "color5" = "#7e40a5";
      "color6" = "#3579a8";
      "color7" = "#9999aa";
      "color8" = "#303030";
      "color9" = "#ff0090";
      "color10" = "#80ff00";
      "color11" = "#ffba68";
      "color12" = "#5f5fee";
      "color13" = "#bb88dd";
      "color14" = "#4eb4fa";
      "color15" = "#d0d0d0";
    };
  };
}
#+end_src

Urxvt gets its setting from =.Xresources= file. If you ever want to reload it on-the-fly, type the following (or press =C-c C-c= if you're reading this document in emacs now):
#+begin_src sh
xrdb ~/.Xresources
#+end_src
*** Font
I use Terminus font.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    fonts = [
      pkgs.powerline-fonts
      pkgs.terminus_font
    ];
  };
}
#+end_src
** shell
[[https://fishshell.com/][fish]] is a cool shell, I use it as my default for day-to-day work.

#+name: nixos-section
#+begin_src nix
{
  programs.fish.enable = true;
  users.defaultUserShell = pkgs.fish;
}
#+end_src

For home-manager:
#+name: home-manager-section
#+begin_src nix
{
  programs.fish = {
    enable = true;
    shellAliases = {
      g = "git";
      rm = "rm -r";
      ec = "emacsclient";
    };
    functions = {
      # old stuff
      screencast = ''
        function screencast
            # key-mon --meta --nodecorated --theme=big-letters --key-timeout=0.05 &
            ffmpeg -probesize 3000000000 -f x11grab -framerate 25 -s 3840x3960 -i :0.0 -vcodec libx264 -threads 2 -preset ultrafast -crf 0 ~/tmp/record/record-(date +"%FT%T%:z").mkv
            # killall -r key-mon
        end
      '';
      reencode = ''
        function reencode
            ffmpeg -i file:$argv[1] -c:v libx264 -crf 0 -preset veryslow file:(basename $argv[1] .mkv).crf-0.min.mkv
        end
      '';
    };
  };

  # manage other shells as well
  programs.bash.enable = true;
}
#+end_src
*** Vi key bindings
#+name: home-manager-section
#+begin_src nix
{
  programs.fish.functions.fish_user_key_bindings = ''
    function fish_user_key_bindings
        fish_vi_key_bindings

        bind -s j up-or-search
        bind -s k down-or-search
        bind -s -M visual j up-line
        bind -s -M visual k down-line

        bind -s '.' repeat-jump
    end
  '';
}
#+end_src
** git
home-manager-section
#+name: home-manager-section
#+begin_src nix
{
  programs.git = {
    enable = true;
    package = pkgs.gitAndTools.gitFull;

    userName = "Alexey Shmalko";
    userEmail = "rasen.dubi@gmail.com";

    signing = {
      key = "EB3066C3";
      signByDefault = true;
    };

    extraConfig = {
      sendemail = {
        smtpencryption = "ssl";
        smtpserver = "smtp.gmail.com";
        smtpuser = "rasen.dubi@gmail.com";
        smtpserverport = 465;
      };

      color.ui = true;
      core.editor = "vim";
      push.default = "simple";
      pull.rebase = true;
      rebase.autostash = true;
      rerere.enabled = true;
      advice.detachedHead = false;
    };
  };
}
#+end_src

I have *LOTS* of aliases:
#+name: home-manager-section
#+begin_src nix
{
  programs.git.aliases = {
    cl    = "clone";
    gh-cl = "gh-clone";
    cr    = "cr-fix";
    p     = "push";
    pl    = "pull";
    f     = "fetch";
    fa    = "fetch --all";
    a     = "add";
    ap    = "add -p";
    d     = "diff";
    dl    = "diff HEAD~ HEAD";
    ds    = "diff --staged";
    l     = "log --show-signature";
    l1    = "log -1";
    lp    = "log -p";
    c     = "commit";
    ca    = "commit --amend";
    co    = "checkout";
    cb    = "checkout -b";
    cm    = "checkout origin/master";
    de    = "checkout --detach";
    fco   = "fetch-checkout";
    br    = "branch";
    s     = "status";
    re    = "reset --hard";
    r     = "rebase";
    rc    = "rebase --continue";
    ri    = "rebase -i";
    m     = "merge";
    t     = "tag";
    su    = "submodule update --init --recursive";
    bi    = "bisect";
  };
}
#+end_src

Always push to github with ssh keys instead of login/password.
#+name: home-manager-section
#+begin_src nix
{
  programs.git.extraConfig = {
    url."git@github.com:".pushInsteadOf = "https://github.com";
  };
}
#+end_src

Also, install git for the rest of the system.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.git
  ];
}
#+end_src
** tmux
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.tmux
  ];
}
#+end_src

For home-manager.
#+name: home-manager-section
#+begin_src nix
{
  programs.tmux = {
    enable = true;
    keyMode = "vi";
    # Use C-a as prefix
    shortcut = "a";
    # To make vim work properly
    terminal = "screen-256color";

    # start numbering from 1
    baseIndex = 1;
    # Allows for faster key repetition
    escapeTime = 0;
    historyLimit = 10000;

    reverseSplit = true;

    clock24 = true;

    extraConfig = ''
      bind-key S-left swap-window -t -1
      bind-key S-right swap-window -t +1

      bind h select-pane -L
      bind k select-pane -D
      bind j select-pane -U
      bind l select-pane -R

      bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

      set-window-option -g automatic-rename
    '';
  };
}
#+end_src
** Other terminal goodies
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.wget
    pkgs.htop
    pkgs.psmisc
    pkgs.zip
    pkgs.unzip
    pkgs.unrar
    pkgs.bind
    pkgs.file
    pkgs.which
    pkgs.utillinuxCurses
    pkgs.ripgrep

    pkgs.patchelf

    pkgs.python3
  ];
  # environment.variables.NPM_CONFIG_PREFIX = "$HOME/.npm-global";
  # environment.variables.PATH = "$HOME/.npm-global/bin:$PATH";
}
#+end_src
** Man pages
This install a number of default man pages for the linux/posix system.
#+begin_src nix
{
  documentation = {
    man.enable = true;
    dev.enable = true;
  };

  environment.systemPackages = [
    pkgs.man-pages
    pkgs.stdman
    pkgs.posix_man_pages
    pkgs.stdmanpages
  ];
}
#+end_src
* Other configs
# #+name: home-manager-section
#+begin_src nix
{
  home.file = {
    ".vim".source = ./.vim;
    ".nvim".source = ./.vim;
    ".nethackrc".source = ./.nethackrc;
  };

  programs.fish.shellInit = ''
    set -x PATH ${./bin} $PATH
  '';

  xdg.configFile."awesome".source = ./.config/awesome;
}
#+end_src
