Hi there! That's my dotfiles. Most of config files are now generated by [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] from this file (yes, from =README.org=). That's [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] applied to dotfiles. To generate all files you can open this file in emacs and press =M-x org-babel-tangle=. Or from command line with:

#+begin_src sh
emacs README.org --batch -f org-babel-tangle
#+end_src

#+RESULTS:

I keep this document in sync with generated config files just in case I won't have access to my emacs. However, I recommend against looking at them---they're just a generated mess; you'll have much better time reading this doc instead---trust me.

Pieces not (yet) covered in this document are:
- emacs configuration at =.emacs.d/=;
- vim configuration at =.vimrc= and =.vim/=;
- awesome wm configuration at =.config/awesome/=;
- scripts at =bin/=;
- irssi config at =.irssi=;

* NixOS
I'm a [[http://nixos.org/][NixOS]] user. What's cool about it is that I can describe all my system configuration in one file (=/etc/nixos/configuration.nix=), so I can just copy it to other machine, call =nixos-rebuild= and have system with the same software, system settings, etc.

An outline looks like this.

#+begin_src nix :tangle nixos/configuration.nix :noweb no-export :padline no
{ config, pkgs, lib, ... }:
let
  meta = import ./meta.nix;
  machine-config = lib.getAttr meta.name {
    omicron = [
      <<machine-omicron>>
    ];
  };

in
{
  imports = [
    {
      nixpkgs.config.allowUnfree = true;

      # The NixOS release to be compatible with for stateful data such as databases.
      system.stateVersion = "15.09";
    }

    <<nixos-section>>
  ] ++ machine-config;
}
#+end_src

This =<<nixos-section>>= is replaced by other parts of this doc.

** Default locations

Move nixos configuration from the default location to the =dotfiles/nixos/configuration.nix=.

Also disable channel mechanism and makes nixos use Nixpkgs in the =dotfiles/channels= directory. I usually follow nixpkgs-unstable, but that gives me more control.

#+name: nixos-section
#+begin_src nix
{
  nix.nixPath =
    let dotfiles = "/home/rasen/dotfiles";
    in [
      "nixos-config=${dotfiles}/nixos/configuration.nix"
      "dotfiles=${dotfiles}"
      "${dotfiles}/channels"
    ];
}
#+end_src

If you want to override default configuration location for the very first =nixos-rebuild=, use =-I= flag:
#+begin_src sh
sudo nixos-rebuild switch -I nixos-config=/etc/nixos/configuration.nix
#+end_src

** Save config

Save nixos-config in the Nix store, so I can retrieve it later. The config for the currently running system is located at =/var/run/current-system/configuration.nix=.

#+name: nixos-section
#+begin_src nix
{
  system.copySystemConfiguration = true;
}
#+end_src

This setting copies only the =configuration.nix= file, which works pretty nice as I have only one configuration file and don't split it.

** Users
I'm the only user of the system:

#+name: nixos-section
#+begin_src nix
{
  users.extraUsers.rasen = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "users" "wheel" "input" ];
    initialPassword = "HelloWorld";
  };
}
#+end_src

=initialPassword= is used only first time when user is created. It must be changed as soon as possible with =passwd=.

** Machines
#+name: Machines section
I currently have only one machine.
*** omicron
This is my small Dell XPS 13.
#+name: machine-omicron
#+begin_src nix
{
  imports = [
    <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
  ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  nix.maxJobs = lib.mkDefault 4;

  powerManagement.cpuFreqGovernor = "powersave";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
}
#+end_src

Same LVM on LUKS setup as =ashmalko= uses.
#+name: machine-omicron
#+begin_src nix
{
  boot.initrd.luks.devices = [
    {
      name = "root";
      device = "/dev/disk/by-uuid/8b591c68-48cb-49f0-b4b5-2cdf14d583dc";
      preLVM = true;
    }
  ];
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/BA72-5382";
    fsType = "vfat";
  };
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/434a4977-ea2c-44c0-b363-e7cf6e947f00";
    fsType = "ext4";
    options = [ "noatime" "nodiratime" "discard" ];
  };
  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/8bfa73e5-c2f1-424e-9f5c-efb97090caf9";
    fsType = "ext4";
    options = [ "noatime" "nodiratime" "discard" ];
  };
  swapDevices = [
    { device = "/dev/disk/by-uuid/26a19f99-4f3a-4bd5-b2ed-359bed344b1e"; }
  ];
}
#+end_src

Clickpad:
#+name: machine-omicron
#+begin_src nix
{
  services.xserver.libinput = {
    enable = true;
    accelSpeed = "0.7";
  };
}
#+end_src
** Local overlay
As a responsible NixOS user, I refuse to install software blindly with =sudo make install=. That's why I must write my own nix-expressions. I keep them in my local overlay until they're merged upstream.

Store separate overlays in a directory:
#+name: nixos-section
#+begin_src nix
{
  nix.nixPath = [ "nixpkgs-overlays=/home/rasen/dotfiles/nixpkgs-overlays" ];
}
#+end_src

The entry point is just a set of all my packages in =nixpkgs-local/default.nix=:
#+begin_src nix :tangle nixpkgs-local/default.nix :noweb no-export :padline no
{ pkgs ? import <nixpkgs> { } }:

let
  callPackage = pkgs.lib.callPackageWith (pkgs // pkgs.xlibs // self);

  pythonPackages = pkgs.pythonPackages // rec {
    <<nixpkgs-local-python-packages>>
  };

  self = rec {
    <<nixpkgs-local-packages>>
  };

in self
#+end_src

You can install all packages to current user with:
#+begin_src sh
nix-env -f nixpkgs-local/default.nix -i
#+end_src

#+RESULTS:

To make package results testing better, I build them in isolated environment (for more info, see [[https://nixos.org/nixos/manual/options.html#opt-nix.useChroot][nixos manual]]):
#+name: nixos-section
#+begin_src nix
{
  nix.useSandbox = "relaxed";
}
#+end_src

Note that this is ="relaxed"= instead of =true=, because I have some packages that require a network to build and thus are =__noChroot=.

*** heroku
#+name: nixpkgs-local-packages
#+begin_src nix
heroku = (import ./heroku { inherit pkgs; }).heroku-cli;
#+end_src

To generate all Nix files use the following steps.

This goes to =nixpkgs-local/heroku/node-packages.json= file:
#+begin_src json :mkdirp yes :tangle nixpkgs-local/heroku/node-packages.json
["heroku-cli"]
#+end_src

To generate the rest of Nix files, execute the following command from =nixpkgs-local/heroku= directory (note that you need a fresh nixpkgs-unstable):
#+begin_src sh :dir nixpkgs-local/heroku :results output
nix-shell -p nodePackages.node2nix --run 'node2nix -8 -i node-packages.json 2>&1'
#+end_src

** Bluetooth
I have a bluetooth headset, so this enables bluetooth audio in NixOS.

#+name: nixos-section
#+begin_src nix
  {
    hardware.bluetooth.enable = true;
    hardware.pulseaudio = {
      enable = true;

      # NixOS allows either a lightweight build (default) or full build
      # of PulseAudio to be installed.  Only the full build has
      # Bluetooth support, so it must be selected here.
      package = pkgs.pulseaudioFull;
    };
  }
#+end_src
** NTFS
Install ntfs-3g to mount ntfs volumes in read-write mode.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.ntfs3g
  ];
}
#+end_src
* Services
** NetworkManager
#+name: nixos-section
#+begin_src nix
{
  networking = {
    hostName = meta.name;

    networkmanager.enable = true;

    # disable wpa_supplicant
    wireless.enable = false;
  };

  users.extraUsers.rasen.extraGroups = [ "networkmanager" ];

  environment.systemPackages = [
    pkgs.networkmanagerapplet
  ];
}
#+end_src
** PulseAudio
Use pulseaudio (multiple sound sinks, skype calls). =pavucontrol= is PulseAudio Volume Control---a nice utility for controlling pulseaudio settings.

Also, Pulseaudio is a requirement for Firefox Quantum.
#+name: nixos-section
#+begin_src nix
{
  hardware.pulseaudio = {
    enable = true;
    support32Bit = true;
  };

  environment.systemPackages = [ pkgs.pavucontrol ];
}
#+end_src
** Locate
Update [[https://linux.die.net/man/1/locate][locate]] database daily.
#+name: nixos-section
#+begin_src nix
{
  services.locate = {
    enable = true;
    localuser = "rasen";
  };
}
#+end_src
** OpenVPN
All my computers are members of the VPN:
#+name: nixos-section
#+begin_src nix
{
  services.openvpn.servers = {
    kaa.config = ''
      client
      dev tap
      port 22
      proto tcp
      tls-client
      persist-key
      persist-tun
      ns-cert-type server
      remote vpn.kaa.org.ua
      ca /root/.vpn/ca.crt
      key /root/.vpn/alexey.shmalko.key
      cert /root/.vpn/alexey.shmalko.crt
    '';
  };
}
#+end_src

** Avahi
Avahi is needed to allow resolution of =.local= names. For example, you can access this computer by =omicron.local= if we meet at the same local network. (Probably not, as it only works in the OpenVPN network.)
#+name: nixos-section
#+begin_src nix
{
  services.avahi = {
    enable = true;
    browseDomains = [ ];
    interfaces = [ "tap0" ];
    nssmdns = true;
    publish = {
      enable = true;
      addresses = true;
    };
  };
}
#+end_src
** SSH
#+name: nixos-section
#+begin_src nix
{
  services.openssh = {
    enable = true;
    passwordAuthentication = false;
  };
}
#+end_src

Allow SSH access from my VPN network only.
#+name: nixos-section
#+begin_src nix
{
  services.openssh = {
    # Doing this won't open firewall for everybody.
    ports = [];
    listenAddresses = [
      { addr = "0.0.0.0"; port = 22; }
    ];
  };

  # Open firewall for tap0 only
  networking.firewall = {
    extraCommands = ''
      ip46tables -D INPUT -i tap0 -p tcp -m tcp --dport 22 -j ACCEPT 2> /dev/null || true
      ip46tables -A INPUT -i tap0 -p tcp -m tcp --dport 22 -j ACCEPT
    '';
  };
}
#+end_src
*** Mosh
[[https://mosh.mit.edu/][Mosh (mobile shell)]] is a cool addition to ssh.
#+name: nixos-section
#+begin_src nix
{
  programs.mosh.enable = true;
}
#+end_src
** dnsmasq
Use [[http://www.thekelleys.org.uk/dnsmasq/doc.html][dnsmasq]] as a DNS cache.

#+name: nixos-section
#+begin_src nix
{
  services.dnsmasq = {
    enable = true;

    # These are used in addition to resolv.conf
    servers = [
      "8.8.8.8"
      "8.8.4.4"
    ];

    extraConfig = ''
      listen-address=127.0.0.1
      cache-size=1000

      no-negcache
    '';
  };
}
#+end_src
** Syncthing
I use Syncthing to sync my org-mode files to my phone.

#+name: nixos-section
#+begin_src nix
{
  services.syncthing = {
    enable = true;
    user = "rasen";
    dataDir = "/home/rasen/.config/syncthing";
    openDefaultPorts = true;
  };
}
#+end_src
** Firewall
Enable firewall. This blocks all ports (for ingress traffic) and pings.

#+name: nixos-section
#+begin_src nix
{
  networking.firewall = {
    enable = true;
    allowPing = false;

    connectionTrackingModules = [];
    autoLoadConntrackHelpers = false;
  };
}
#+end_src
** Development
#+name: nixos-section
#+begin_src nix
{
  services.postgresql.enable = true;
}
#+end_src

#+name: nixos-section
#+begin_src nix
{
  virtualisation.docker.enable = true;
}
#+end_src
* Mail setup
** Mbsync
I use mbsync to sync my accounts and make them available offline.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.isync
  ];
}
#+end_src

Config file is =.mbsyncrc=.
#+begin_src conf :tangle .mbsyncrc :noweb yes
MaildirStore local
Path ~/Mail/
Inbox ~/Mail/INBOX
SubFolders Verbatim

<<mbsync-gmail(name="gmail", email="rasen.dubi@gmail.com", path="Personal")>>
<<mbsync-gmail(name="ps", email="ashmalko@doctoright.org", path="protocolstandard")>>
<<mbsync-gmail(name="egoless", email="me@egoless.tech", path="egoless")>>
#+end_src

I have multiple Gmail accounts, so here is a general template.
#+name: mbsync-gmail
#+begin_src emacs-lisp :var name="" :var email="" :var path="" :noweb no
(rasen/interpolate-string "
IMAPAccount <<name>>
Host imap.gmail.com
User <<email>>
PassCmd \"pass imap.gmail.com/<<email>>\"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore <<name>>-remote
Account <<name>>

Channel sync-<<name>>-all
Master :<<name>>-remote:\"[Gmail]/All Mail\"
Slave :local:<<path>>/all
Create Both
SyncState *

Channel sync-<<name>>-spam
Master :<<name>>-remote:\"[Gmail]/Spam\"
Slave :local:<<path>>/spam
Create Both
SyncState *

Channel sync-<<name>>-sent
Master :<<name>>-remote:\"[Gmail]/Sent Mail\"
Slave :local:<<path>>/sent
Create Both
SyncState *

Group sync-<<name>>
Channel sync-<<name>>-all
Channel sync-<<name>>-spam
Channel sync-<<name>>-sent
")
#+end_src
** Dovecot
Dovecot serves fetched mail to gnus.
#+name: nixos-section
#+begin_src nix
{
  services.dovecot2 = {
    enable = true;
    enablePop3 = false;
    enableImap = true;
    mailLocation = "maildir:~/Mail:LAYOUT=fs";
  };

  # dovecot has some helpers in libexec (namely, imap).
  environment.pathsToLink = [ "/libexec/dovecot" ];
}
#+end_src
** msmtp
Msmtp is used to send mail.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.msmtp
  ];
}
#+end_src

Config file is =.msmtprc=.
#+begin_src conf :tangle .msmtprc :noweb yes
defaults
auth on
tls on
tls_starttls off
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile ~/.msmtp.log

<<msmtp-gmail(name="gmail", email="rasen.dubi@gmail.com")>>
<<msmtp-gmail(name="ps", email="ashmalko@doctoright.org")>>
<<msmtp-gmail(name="egoless", email="me@egoless.tech")>>
#+end_src

Again, general template for gmail accounts.
#+name: msmtp-gmail
#+begin_src emacs-lisp :var name="" :var email="" :noweb no
(rasen/interpolate-string "
# <<name>>
account <<name>>
host smtp.gmail.com
port 465
from <<email>>
user <<email>>
passwordeval \"pass imap.gmail.com/<<email>>\"
")
#+end_src
** notmuch
Notmuch is used for tagging.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.notmuch
  ];
}
#+end_src

Config file is =.notmuch-config=.
#+begin_src conf :tangle .notmuch-config
[user]
name=Alexey Shmalko
primary_email=rasen.dubi@gmail.com
other_email=ashmalko@cybervisiontech.com,ashmalko@kaaiot.io,ashmalko@doctoright.org,me@egoless.tech

[database]
path=/home/rasen/Mail

[new]
tags=inbox;
ignore=.mbsyncstate;.mbsyncstate.lock;.mbsyncstate.new;.mbsyncstate.journal;.uidvalidity;dovecot-uidlist;dovecot-keywords;dovecot.index;dovecot.index.log;dovecot.index.log.2;dovecot.index.cache;/^archive/

[search]
exclude_tags=deleted;spam;muted;

[crypto]
gpg_path=gpg2
#+end_src
* Environment
** General
I definitely use X server:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.enable = true;
}
#+end_src

Use English as my only supported locale:
#+name: nixos-section
#+begin_src nix
{
  i18n.supportedLocales = [ "en_US.UTF-8/UTF-8" ];
}
#+end_src

Setup timezone:
#+name: nixos-section
#+begin_src nix
{
  time.timeZone = "Europe/Kiev";
}
#+end_src
** Login manager
I use SLiM. It stands for Simple Login Manager. It's fast and has little dependencies. The projects is dead since 2014, but still works fine, so I keep using it.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.displayManager.slim.enable = true;
}
#+end_src
** Window manager
I use [[http://awesome.naquadah.org/][awesome wm]]:

#+name: nixos-section
#+begin_src nix
{
  services.xserver.displayManager.slim.enable = true;
  services.xserver.windowManager = {
    default = "awesome";
    awesome = {
      enable = true;
      luaModules = [ pkgs.luaPackages.luafilesystem pkgs.luaPackages.cjson ];
    };
  };
}
#+end_src

Disabling xterm makes awesome wm a default choice in slim:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.desktopManager.xterm.enable = false;
}
#+end_src

These packages are used by my awesome wm setup:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.wmname
    pkgs.xclip
    pkgs.escrotum
  ];
}
#+end_src
** Keyboard
*** Layouts
I use English and Ukrainian layouts. I also use Russian symbols, but they are on the third level.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.layout = "us,ua";
  services.xserver.xkbVariant = "workman,";

  # Use same config for linux console
  i18n.consoleUseXkbConfig = true;
}
#+end_src

I toggle between them with either Caps Lock, or Menu key---I have two different keyboards, and one doesn't have Menu when Caps Lock is too far on the second. I never use Caps Lock--the feature, so it's nice to have Caps LED indicate alternate layouts.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.xkbOptions = "grp:caps_toggle,grp:menu_toggle,grp_led:caps";
}
#+end_src
*** Layout indicator
I use built-in awesome layout indicator. See [[.config/awesome/rc.lua]] for more details.
** Redshift
Redshift adjusts the color temperature of the screen according to the position of the sun.

Blue light blocks [[https://en.wikipedia.org/wiki/Melatonin][melatonin]] (sleep harmone) secretion, so you feel less sleepy when you stare at computer screen.
Redshift blocks some blue light (making screen more red), which should improve melatonin secretion and restore sleepiness (which is a good thing).

#+name: nixos-section
#+begin_src nix
{
  services.redshift = {
    enable = true;
    latitude = "50.4500";
    longitude = "30.5233";
  };
}
#+end_src
** Screen brightness
=xbacklight= stopped working recently. =acpilight= is a drop-in replacement.
#+name: nixos-section
#+begin_src nix
{
  hardware.acpilight.enable = true;
  environment.systemPackages = [
    pkgs.acpilight
  ];
  users.extraUsers.rasen.extraGroups = [ "video" ];
}
#+end_src

acpilight wasn't added to modules-list when module was added to nixpkgs.
Submitted fix upstream: https://github.com/NixOS/nixpkgs/pull/57920.
#+name: nixos-section
#+begin_src nix
{
  imports = [
    <nixpkgs/nixos/modules/hardware/acpilight.nix>
  ];
}
#+end_src
* Look and Feel
** Qt theme
This makes apps look like in KDE:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.oxygen-icons5
  ];
}
#+end_src

The following block is a back-port of =oxygen-gtk= theme, which was removed with remove of KDE4 from nixpkgs.
#+name: nixos-section
#+begin_src nix
(let
  oldpkgs = import (pkgs.fetchFromGitHub {
    owner = "NixOS";
    repo = "nixpkgs-channels";
    rev = "1aa77d0519ae23a0dbef6cab6f15393cfadcc454";
    sha256 = "1gcd8938n3z0a095b0203fhxp6lddaw1ic1rl33q441m1w0i19jv";
  }) { config = config.nixpkgs.config; };
in {
  environment.systemPackages = [ oldpkgs.oxygen-gtk2 oldpkgs.oxygen-gtk3 ];

  environment.shellInit = ''
    export GTK_PATH=$GTK_PATH:${oldpkgs.oxygen_gtk}/lib/gtk-2.0
    export GTK2_RC_FILES=$GTK2_RC_FILES:${oldpkgs.oxygen_gtk}/share/themes/oxygen-gtk/gtk-2.0/gtkrc
  '';
})
#+end_src

*** TODO Find a way to make deadbeef use oxygen theme
The theme has some issues with deadbeef, so I install adwaita icons to make deadbeef usable.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gnome3.adwaita-icon-theme
  ];
}
#+end_src

** Fonts
I'm not a font guru, so I just stuffed a bunch of random fonts in here.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    enableCoreFonts = true;
    enableFontDir = true;
    enableGhostscriptFonts = false;

    fonts = with pkgs; [
      inconsolata
      corefonts
      dejavu_fonts
      source-code-pro
      ubuntu_font_family
      unifont
    ];
  };
}
#+end_src
** HiDPI
These are for omicron-only.

#+begin_src fundamental :tangle .Xresources
Xft.dpi: 276
Xcursor.size: 64
#+end_src

#+name: machine-omicron
#+begin_src nix
{
  i18n = {
    consolePackages = [
      pkgs.terminus_font
    ];
    consoleFont = "ter-132n";
  };
}
#+end_src

#+name: machine-omicron
#+begin_src nix
{
  boot.loader.grub.gfxmodeEfi = "1024x768";
}
#+end_src

#+name: machine-omicron
#+begin_src nix
{
  services.xserver.dpi = 276;
}
#+end_src
* Applications
Here go applications (almost) every normal user needs.
** GPG
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gnupg
    pkgs.pinentry
  ];
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };

  systemd.user.sockets.gpg-agent-ssh = {
    wantedBy = [ "sockets.target" ];
    listenStreams = [ "%t/gnupg/S.gpg-agent.ssh" ];
    socketConfig = {
      FileDescriptorName = "ssh";
      Service = "gpg-agent.service";
      SocketMode = "0600";
      DirectoryMode = "0700";
    };
  };

  services.pcscd.enable = true;
}
#+end_src
** Yubikey
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.yubikey-manager
    pkgs.yubikey-personalization
    pkgs.yubikey-personalization-gui
  ];

  services.udev.packages = [ pkgs.yubikey-personalization ];
}
#+end_src
** password-store
Install [[https://www.passwordstore.org/][password-store]] along with [[https://github.com/tadfisher/pass-otp][one-time password extension]].
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    (pkgs.pass.withExtensions (exts: [ exts.pass-otp ]))
  ];
}
#+end_src

Install [[https://github.com/browserpass/browserpass][browserpass]] firefox extension backend.
#+name: nixos-section
#+begin_src nix
{
  programs.browserpass.enable = true;
}
#+end_src
** KDE apps
I don't use full KDE but some apps are definitely nice.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gwenview
    pkgs.dolphin
    pkgs.kdeFrameworks.kfilemetadata
    pkgs.filelight
    pkgs.shared_mime_info
  ];
}
#+end_src

KDE apps might have issues with mime types without this:
#+name: nixos-section
#+begin_src nix
{
  environment.pathsToLink = [ "/share" ];
}
#+end_src
** Browsers
*** Google Chrome
Google Chrome used to be my default browser and I still use it from time to time.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.google-chrome
  ];
}
#+end_src
*** Firefox
I use Firefox Quantum as my default browser now.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.firefox
    pkgs.icedtea_web
  ];
}
#+end_src

I also need an old Firefox with Java support. I use Firefox Extended Support Release for that (pinned to the latest version with Java support). It clashes with firefox-devedition, so I do some renaming here.

#+name: nixos-section
#+begin_src nix
(let
  oldpkgs = import (pkgs.fetchFromGitHub {
    owner = "NixOS";
    repo = "nixpkgs-channels";
    rev = "14cbeaa892da1d2f058d186b2d64d8b49e53a6fb";
    sha256 = "0lfhkf9vxx2l478mvbmwm70zj3vfn9365yax7kvm7yp07b5gclbr";
  }) { config = { firefox.icedtea = true; }; };
in {
  nixpkgs.config.firefox = {
    icedtea = true;
  };

  environment.systemPackages = [
    (pkgs.runCommand "firefox-esr" { preferLocalBuild = true; } ''
      mkdir -p $out/bin
      ln -s ${oldpkgs.firefox-esr}/bin/firefox $out/bin/firefox-esr
    '')
  ];
})
#+end_src
** Zathura
[[https://pwmt.org/projects/zathura/][Zathura]] is a cool document viewer with Vim-like bindings.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.zathura
  ];
}
#+end_src

Enable incremental search (Zathura's config goes to =~/.config/zathura/zathurarc=).
#+begin_src fundamental :tangle .config/zathura/zathurarc :padline no
set incremental-search true
#+end_src

These are my rebinding for Workman layout (swap j/k):
#+begin_src fudamental :tangle .config/zathura/zathurarc :padline no
map j scroll up
map k scroll down
#+end_src
** Screen locking
*** Slock
[[http://tools.suckless.org/slock/][Slock]] is a simple X display locker and should probably not crash as xscreensaver does.

Slock tries to disable OOM killer (so the locker is not killed when memory is low) and this requires a suid flag for executable. Otherwise, you get the following message:
#+begin_src fundamental
slock: unable to disable OOM killer. Make sure to suid or sgid slock.
#+end_src

#+name: nixos-section
#+begin_src nix
{
  programs.slock.enable = true;
}
#+end_src
*** xss-lock
[[https://bitbucket.org/raymonad/xss-lock][xss-lock]] is a small utility to plug a screen locker into screen saver extension for X. This automatically activates selected screensaver after a period of user inactivity, or when system goes to sleep.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.xss-lock
  ];
}
#+end_src
** Other applications
Don't require additional setup.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.libreoffice
    pkgs.qbittorrent
    pkgs.google-play-music-desktop-player
    pkgs.deadbeef
    pkgs.tdesktop # Telegram

    pkgs.mplayer
    pkgs.smplayer

    # Used by naga setup
    pkgs.xdotool

    pkgs.hledger
    pkgs.drive
  ];
}
#+end_src
* Development
** Editors
I'm a seasoned Vim user, but I've switched to emacs.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    (pkgs.vim_configurable.override { python3 = true; })
    pkgs.neovim
  ];
}
#+end_src

Start emacs as a daemon:
#+name: nixos-section
#+begin_src nix
{
  services.emacs = {
    enable = true;
    defaultEditor = true;
    package = (pkgs.emacsPackagesNgGen pkgs.emacs).emacsWithPackages (epkgs:
      (with epkgs.melpaStablePackages; [
        use-package
        diminish
        el-patch

        evil
        evil-numbers
        evil-swap-keys
        evil-collection

        smex
        counsel
        whitespace-cleanup-mode
        which-key
        projectile
        noccur

        diff-hl
        yasnippet
        company
        flycheck
        color-identifiers-mode
        f

        avy
        wgrep
        org-pomodoro
        nix-mode
        haskell-mode
        rust-mode
        racer
        pip-requirements
        js2-mode
        rjsx-mode
        typescript-mode
        tide
        php-mode
        web-mode
        groovy-mode
        go-mode
        lua-mode
        ledger-mode
        markdown-mode
        edit-indirect
        json-mode
        yaml-mode
        jinja2-mode
        gitconfig-mode
        terraform-mode
        graphviz-dot-mode
        fish-mode
        notmuch
        airline-themes
        visual-fill-column
        beacon
        google-translate
        writegood-mode
      ]) ++
      (with epkgs.melpaPackages; [
        # Not present in melpa-stable
        general
        flycheck-jest
        purescript-mode
        psc-ide
        restclient
        mbsync
        nix-sandbox

        # Don't work in melpa-stable
        counsel-projectile
        ivy

        # Don't work / too old in melpa-stable
        magit
        evil-magit

        # too old
        evil-org
      ]) ++
      [
        epkgs.orgPackages.org-plus-contrib

        pkgs.ycmd
      ]
    );
  };
  environment.systemPackages = [
    pkgs.ripgrep
    (pkgs.aspellWithDicts (dicts: with dicts; [en en-computers en-science ru uk]))
  ];
}
#+end_src
** rxvt-unicode
I use urxvt as my terminal emulator:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.rxvt_unicode
  ];
}
#+end_src

Urxvt gets its setting from =.Xresources= file. If you ever want to reload it on-the-fly, type the following (or press =C-c C-c= if you're reading this document in emacs now):
#+begin_src sh
xrdb ~/.Xresources
#+end_src
*** General setup
See [[http://pod.tst.eu/http://cvs.schmorp.de/rxvt-unicode/doc/rxvt.1.pod][rxvt-unicode documentation]] for the full reference.

#+begin_src conf-xdefaults :tangle .Xresources :padline no
urxvt.loginShell:         true
urxvt.saveLines:         65535
urxvt.urgentOnBell:       true

urxvt.scrollBar:         false
urxvt.scrollTtyOutput:   false
urxvt.scrollTtyKeypress:  true
urxvt.secondaryScroll:    true
#+end_src

The next piece disables annoying message when pressing Ctrl+Shift:
#+begin_src conf-xdefaults :tangle .Xresources
urxvt.iso14755: False
#+end_src

+Copy-paste with Ctrl+Shift+C, Ctrl+Shift+V:+

From [[https://github.com/muennich/urxvt-perls][urxvt-perls]]:
#+begin_quote
Since version 9.20 rxvt-unicode natively supports copying to and pasting from the CLIPBOARD buffer with the Ctrl-Meta-c and Ctrl-Meta-v key bindings. The clipboard.autocopy setting is provided by the selection_to_clipboard extension shipped with rxvt-unicode.
#+end_quote

That means, I don't need perl extensions at all.
*** Font
I use Terminus font.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    fonts = [
      pkgs.powerline-fonts
      pkgs.terminus_font
    ];
  };
}
#+end_src

#+begin_src conf-xdefaults :tangle .Xresources
URxvt.font: -*-terminus-medium-r-normal-*-32-*-*-*-*-*-iso10646-1
#+end_src

# I used this line before:
# URxvt.font: xft:Terminus:normal:size=12
*** Color theme
I like Molokai color theme.

#+begin_src conf-xdefaults :tangle .Xresources
URxvt*background: #101010
URxvt*foreground: #d0d0d0
URxvt*color0:     #101010
URxvt*color1:     #960050
URxvt*color2:     #66aa11
URxvt*color3:     #c47f2c
URxvt*color4:     #30309b
URxvt*color5:     #7e40a5
URxvt*color6:     #3579a8
URxvt*color7:     #9999aa
URxvt*color8:     #303030
URxvt*color9:     #ff0090
URxvt*color10:    #80ff00
URxvt*color11:    #ffba68
URxvt*color12:    #5f5fee
URxvt*color13:    #bb88dd
URxvt*color14:    #4eb4fa
URxvt*color15:    #d0d0d0
#+end_src
** fish
[[https://fishshell.com/][fish]] is a cool shell, I use it as my default for day-to-day work.

#+name: nixos-section
#+begin_src nix
{
  programs.fish.enable = true;
  users.defaultUserShell = pkgs.fish;
}
#+end_src
*** Vi key bindings
Tangle to =.config/fish/functions/fish_user_key_bindings.fish=.

#+begin_src fish :tangle .config/fish/functions/fish_user_key_bindings.fish
function fish_user_key_bindings
    fish_vi_key_bindings

    bind -s j up-or-search
    bind -s k down-or-search
    bind -s -M visual j up-line
    bind -s -M visual k down-line

    bind -s '.' repeat-jump
end
#+end_src
*** Show QR codes
The next section goes to =.config/fish/functions/showqr.fish=. That's a function I use for displaying arbitrary text (mainly passwords stored with =pass=) as a QR code without any temporary files. (=tr= is used to drop trailing newline.)

#+begin_src fish :tangle .config/fish/functions/showqr.fish
function showqr
  tr -d '\n' | qrencode -t png -o - | feh -
end
#+end_src

It uses =qrencode= and =feh= packages:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.qrencode
    pkgs.feh
  ];
}
#+end_src
** Zsh
Zsh is my secondary shell. I use it when I need sh compatibility. (fish is not sh compliant.)
#+name: nixos-section
#+begin_src nix
{
  programs.zsh.enable = true;
}
#+end_src
*** Prompt
#+begin_src shell-script :tangle .zshrc :padline no
source $HOME/.zsh/git-prompt/zshrc.sh

PROMPT='%B%F{green}%n@%m%k %B%F{blue}%1~%b$(git_super_status) %B%F{blue}%# %b%f%k'
RPROMPT="[%?] %T"
#+end_src

    The =~/.zsh/git-prompt/= is a submodule, so don't forget to initialize it!
#+begin_src sh
git submodule update --init --recursive
#+end_src
*** Aliases
Nothing special, but ~g=git~ is a real timesaver.
#+begin_src shell-script :tangle .zshrc
alias ls='ls --color=auto'
alias grep='grep --color=auto'

alias g="git"
#+end_src
*** PATH
Install stuff in =~/.local/=; =~/bin/= is for my helper scripts (linked to =bin= directory in dotfiles repo).

#+begin_src shell-script :tangle .zshrc
export PATH="${HOME}/bin:${PATH}"
export PATH="${HOME}/.local/bin:${PATH}"

export LD_LIBRARY_PATH="${HOME}/.local/lib:${LD_LIBRARY_PATH}"
#+end_src
*** Other
This part was written long time ago; I'm not sure I understand and use all of it:
#+begin_src shell-script :tangle .zshrc
autoload -U compinit promptinit
autoload -U colors
compinit
promptinit
colors

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory autocd
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/rasen/.zshrc'

zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

setopt correct
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt extendedglob

setopt listpacked

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

zstyle ':completion:*:functions' ignored-patters '_*'

xdvi() { command xdvi ${*:-*.dvi(om[1])} }
zstyle ':completion:*:*:xdvi:*' menu yes select
zstyle ':completion:*:*:xdvi:*' file-sort time

zstyle ':completion:*' squeeze-slashes true

# End of lines added by compinstall
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}

key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
#+end_src
    /TODO review this/

** git
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gitFull
    pkgs.gitg
  ];
}
#+end_src

Basic info: my name, email, ui, editor, [[https://git-scm.com/blog/2010/03/08/rerere.html][rerere]].

#+begin_src gitconfig :tangle .gitconfig :padline no
[user]
    name = Alexey Shmalko
    email = rasen.dubi@gmail.com

[sendemail]
    smtpencryption = ssl
    smtpserver = smtp.gmail.com
    smtpuser = rasen.dubi@gmail.com
    smtpserverport = 465

[color]
    ui = true

[core]
    editor = vim

[push]
    default = simple

[pull]
    rebase = true

[rebase]
    autostash = true

[rerere]
    enabled = true
#+end_src

Configure signing with [[https://www.gnupg.org/][gpg]].
#+begin_src gitconfig :tangle .gitconfig
[user]
    signingkey = EB3066C3

[gpg]
    program = gpg2

[push]
    gpgSign = if-asked
#+end_src

I have *LOTS* of aliases:

#+begin_src gitconfig :tangle .gitconfig
[alias]
    cl  = clone
    gh-cl = gh-clone
    cr  = cr-fix
    p   = push
    pl  = pull
    f   = fetch
    fa  = fetch --all
    a   = add
    ap  = add -p
    d   = diff
    dl  = diff HEAD~ HEAD
    ds  = diff --staged
    l   = log --show-signature
    l1  = log -1
    lp  = log -p
    c   = commit
    ca  = commit --amend
    co  = checkout
    cb  = checkout -b
    cm  = checkout origin/master
    de  = checkout --detach
    fco = fetch-checkout
    br  = branch
    s   = status
    re  = reset --hard
    r   = rebase
    rc  = rebase --continue
    ri  = rebase -i
    m   = merge
    t   = tag
    su  = submodule update --init --recursive
    bi  = bisect
#+end_src

Always push to github with ssh keys instead of login/password.

#+begin_src gitconfig :tangle .gitconfig
[url "git@github.com:"]
    pushInsteadOf = https://github.com/
#+end_src
** tmux
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.tmux
  ];
}
#+end_src

Use =C-a= as a prefix.
#+begin_src conf-space :tangle .tmux.conf :padline no
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
#+end_src

Move windows (tabs) around. Stealed from [[https://til.hashrocket.com/posts/6vz1uo5bxv-move-window-tab-in-tmux][here]].

#+begin_src conf-space :tangle .tmux.conf
bind-key S-left swap-window -t -1
bind-key S-right swap-window -t +1
#+end_src


/TODO describe other settings/
#+begin_src conf-space :tangle .tmux.conf
# To make vim work properly
set -g default-terminal "screen-256color"

set -g status-keys vi
setw -g mode-keys vi

set -g history-limit 10000

# Start numbering from 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind-key s split-window
bind-key v split-window -h

bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

set-window-option -g automatic-rename
#+end_src
** Embedded
The following packages provide a termiinal emulator, Open On-Chip Debugger, telnet, and logic analyzer.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.minicom
    pkgs.openocd
    pkgs.telnet
    pkgs.saleae-logic
  ];
}
#+end_src

To allow user use openocd without sudo, we should add him to =plugdev= group and install openocd udev rules:

#+name: nixos-section
#+begin_src nix
{
  users.extraGroups.plugdev = { };
  users.extraUsers.rasen.extraGroups = [ "plugdev" "dialout" ];

  services.udev.packages = [ pkgs.openocd pkgs.android-udev-rules ];
}
#+end_src
** Other terminal goodies
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.wget
    pkgs.htop
    pkgs.psmisc
    pkgs.zip
    pkgs.unzip
    pkgs.unrar
    pkgs.p7zip
    pkgs.bind
    pkgs.file
    pkgs.which
    pkgs.utillinuxCurses

    pkgs.patchelf

    pkgs.nox

    pkgs.python
    pkgs.python3

    pkgs.awscli
    pkgs.nodejs-10_x
    pkgs.shellcheck

    pkgs.irssi
  ];
}
#+end_src
** Man pages
This install a number of default man pages for the linux/posix system.
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.man-pages
    pkgs.stdman
    pkgs.posix_man_pages
    pkgs.stdmanpages
  ];
}
#+end_src
* Games
** Steam
We need the following package:
# #+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.steam
  ];
}
#+end_src

It's also required to enable 32-bit support for opengl and pulseaudio:
# #+name: nixos-section
#+begin_src nix
{
  hardware.opengl.driSupport32Bit = true;
  hardware.pulseaudio.support32Bit = true;
}
#+end_src
** Nethack
I play nethack rarely, but still nice to have my setting in sync.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.nethack
  ];
}
#+end_src

The following sets my default name, selects a dog, and disables auto-pickup; the last line makes interface a bit friendlier.

#+begin_src fundamental :tangle .nethackrc :padline no
OPTIONS=name:rasen
OPTIONS=role:monk, gender:male
OPTIONS=statushilites
OPTIONS=pettype:dog, dogname:Fido
OPTIONS=!autopickup
OPTIONS=lit_corridor, DECgraphics, showscore, showexp, time, color, hilite_pet
#+end_src
* Meta
** Setup

There is a =setup.sh= script in this directory. It just links all files to =$HOME=:
#+begin_src sh :shebang "#!/bin/sh" :tangle setup.sh :padline no
FILES=".vimrc .vim .nvimrc .nvim .gitconfig .zshrc .zsh .tmux.conf .Xresources .config/awesome .config/nvim .nethackrc .emacs.d .ssh bin .config/zathura .irssi .config/xkb .config/fish .msmtprc .notmuch-config .mbsyncrc"

DEST=$1

if [ -z "$DEST" ]; then
    DEST="$HOME"
fi

BASE=$(cd "$(dirname "$0")" && pwd)

ask_install() {
    FILENAME=$1

    LINK="$DEST/$FILENAME"
    TARGET="$BASE/$FILENAME"

    if [ -e $LINK ]; then
        echo "$LINK exists. Skipping..."
    else
        read -r -p "Link $LINK to $TARGET? [y/N] " response
        case $response in
            [yY][eE][sS]|[yY])
                ln -v -s "$TARGET" "$LINK"
                ;;
        esac
    fi
}

for FILE in $FILES; do
    ask_install $FILE
done
#+end_src

*** Install fisherman
[[https://github.com/fisherman/fisherman][Fisherman]] is a plugin manager for fish.
#+begin_src sh :tangle setup.sh
if [ ! -e "$DEST/.config/fish/functions/fisher.fish" ]; then
    read -r -p "Install fisherman and all plugins? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY])
            curl -Lo "$DEST/.config/fish/functions/fisher.fish" --create-dirs \
                https://raw.githubusercontent.com/fisherman/fisherman/master/fisher.fish
            fish -c fisher
            ;;
    esac
fi
#+end_src

* Private                                                             :crypt-:
