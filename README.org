Hi there! That's my dotfiles. Most of config files are now generated by [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] from this file (yes, from =README.org=). That's [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] applied to dotfiles. To generate all files you can open this file in emacs and press =M-x org-babel-tangle=. Or from command line with:

#+begin_src sh
emacs README.org --batch -f org-babel-tangle
#+end_src

#+RESULTS:

I keep this document in sync with generated config files just in case I won't have access to my emacs. However, I recommend against looking at them---they're just a generated mess; you'll have much better time reading this doc instead---trust me.

Pieces not (yet) covered in this document are:
- emacs configuration at =.emacs.d/=;
- vim configuration at =.vimrc= and =.vim/=;
- awesome wm configuration at =.config/awesome/=;
- scripts at =bin/=;
- irssi config at =.irssi=;

** NixOS
    I'm a [[http://nixos.org/][NixOS]] user. What's cool about it is that I can describe all my system configuration in one file (=/etc/nixos/configuration.nix=), so I can just copy it to other machine, call =nixos-rebuild= and have system with the same software, system settings, etc.

    It looks like this:

#+begin_src nix :tangle nixos/configuration.nix :noweb no-export :padline no
{ config, pkgs, lib, ... }:
let
  meta = import ./meta.nix;
  machine-config = lib.getAttr meta.name {
    Larry = [
      <<machine-larry>>
    ];
    ashmalko = [
      <<machine-ashmalko>>
    ];
  };

in
{
  imports = [
    {
      nixpkgs.config.allowUnfree = true;

      # The NixOS release to be compatible with for stateful data such as databases.
      system.stateVersion = "15.09";
    }

    <<nixos-section>>
  ] ++ machine-config;
}
#+end_src

This =<<nixos-section>>= is replaced by other parts of this doc.

*** Default locations

    This moves nixos configuration from the default location to the dotfiles/nixos/configuration.nix.

    This also disables channel mechanism and makes nixos use Nixpkgs in the =dotfiles/channels= directory. I usually follow nixpkgs-unstable, but that gives me more control.

#+name: nixos-section
#+begin_src nix
{
  nix.nixPath =
    let dotfiles = "/home/rasen/dotfiles";
    in [
      "nixos-config=${dotfiles}/nixos/configuration.nix"
      "dotfiles=${dotfiles}"
      "${dotfiles}/channels"
    ];
}
#+end_src

If you want to override default configuration location, use =-I= flag:
#+begin_src sh
sudo nixos-rebuild switch -I nixos-config=/etc/nixos/configuration.nix
#+end_src

*** Save config

Save nixos-config in the Nix store, so I can later retrieve it. The config for the current system is located at =/var/run/current-system/configuration.nix=.

#+name: nixos-section
#+begin_src nix
{
  system.copySystemConfiguration = true;
}
#+end_src

*** Users
    I'm the only user of the system:

#+name: nixos-section
#+begin_src nix
{
  users.extraUsers.rasen = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "users" "wheel" "input" ];
    initialPassword = "HelloWorld";
  };
}
#+end_src

    =initialPassword= is used only first time when user is created. It must be changed as soon as possible with =passwd=.

*** Machines
#+name: Machines section
    I have two machines. Currently, only one is running NixOS, but I hope to eventually transfer the second one to NixOS, too.

**** Larry
    This one is a laptop that needs the proprietary driver for Wi-Fi card (this =wl= and =broadcom_sta=).

#+name: machine-larry
#+begin_src nix
{
  imports = [ <nixpkgs/nixos/modules/installer/scan/not-detected.nix> ];

  boot.initrd.availableKernelModules = [ "ahci" "xhci_hcd" ];
  boot.initrd.kernelModules = [ "wl" ];

  boot.kernelModules = [ "kvm-intel" "wl" ];
  boot.extraModulePackages = [ config.boot.kernelPackages.broadcom_sta ];
}
#+end_src

    I have two partitions (usual "separate home" setup).
#+name: machine-larry
#+begin_src nix
{
  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/ba82dd25-a9e5-436f-ae76-4ee44d53b2c6";
      fsType = "ext4";
    };
    "/home" = {
      device = "/dev/disk/by-uuid/b27c07d0-aaf7-44a1-87e1-5a2cb30954ec";
      fsType = "ext4";
    };
  };
}
#+end_src

There are also two swap partitions, but one of them is from my slow hdd, so I probably shouldn't use it.

#+name: machine-larry
#+begin_src nix
{
  swapDevices = [
    # TODO: set priority
    # { device = "/dev/disk/by-uuid/f0bd0438-3324-4295-9981-07015fa0af5e"; }
    { device = "/dev/disk/by-uuid/75822d9d-c5f0-495f-b089-f57d0de5246d"; }
  ];
}
#+end_src

    There is also Gentoo on the second drive---it's good to keep it bootable.
#+name: machine-larry
#+begin_src nix
{
  boot.loader.grub = {
    enable = true;
    version = 2;
    device = "/dev/sda";
    extraEntries = ''
      menuentry 'Gentoo' {
        configfile (hd1,1)/grub2/grub.cfg
      }
    '';
  };
}
#+end_src

    Boring stuff: 8 hyper-threads, networking ([[https://launchpad.net/wicd][wicd]]), synaptics (Larry is a laptop).

#+name: machine-larry
#+begin_src nix
{
  nix.maxJobs = 8;
  nix.buildCores = 8;

  networking = {
    hostName = "Larry";

    useDHCP = false;
    wicd.enable = true;
    wireless.enable = false;
  };

  services.xserver.synaptics = {
    enable = true;
    twoFingerScroll = true;
    vertEdgeScroll = true;
  };
}
#+end_src

I have nvidia video card and integrated intel-one. I don't use nvidia one, so next the line disables it:
#+name: machine-larry
#+begin_src nix
{
  hardware.nvidiaOptimus.disable = true;
}
#+end_src

**** ashmalko
This is my desktop computer.
#+name: machine-ashmalko
#+begin_src nix
{
  networking.hostName = "ashmalko";

  nix.maxJobs = 4;
  nix.buildCores = 4;
}
#+end_src

#+name: machine-ashmalko
#+begin_src nix
{
  imports = [
    <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
  ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  boot.kernelParams = [ "intel_pstate=no_hwp" ];
  boot.loader.grub = {
    enable = true;
    version = 2;
    device = "/dev/sda";
    efiSupport = true;
  };
  boot.loader.efi.canTouchEfiVariables = true;
}
#+end_src

This is LMV on LUKS setup.
#+name: machine-ashmalko
#+begin_src nix
{
  boot.initrd.luks.devices = [
    {
      name = "root";
      device = "/dev/disk/by-uuid/a3eb801b-7771-4112-bb8d-42a9676e65de";
      preLVM = true;
      allowDiscards = true;
    }
  ];

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/4184-7556";
    fsType = "vfat";
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/84d89f4b-7707-4580-8dbc-ec7e15e43b52";
    fsType = "ext4";
    options = [ "noatime" "nodiratime" "discard" ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/5a8086b0-627e-4775-ac07-b827ced6998b"; }
  ];
}
#+end_src

Use pulseaudio (multiple sound sinks, skype calls)
#+name: machine-ashmalko
#+begin_src nix
{
  hardware.pulseaudio = {
    enable = true;
    support32Bit = true;
  };
  environment.systemPackages = [ pkgs.pavucontrol ];
}
#+end_src

I'm running an MQTT implementation in there.
#+name: machine-ashmalko
#+begin_src nix
{
  networking.firewall.allowedTCPPorts = [ 1883 8883 3000 ];

  systemd.services.zink = {
    description = "Zink service";
    wantedBy = [ "multi-user.target" ];
    after = [ "grafana.service" ];

    serviceConfig =
      let zink =
        pkgs.rustPlatform.buildRustPackage {
          name = "zink-0.0.1";

          src = pkgs.fetchFromGitHub {
            owner = "rasendubi";
            repo = "zink";
            rev = "influxdb-0.0.1";
            sha256 = "1sw07p2a83s34mp69snz1znwqp8xlba8dqc5y6iqfhyc3zwwbd3w";
          };

          depsSha256 = "1dvk5l32nrpxy7h5pfiqssx06xd72pszd8kr2f2y3ba288ck97rr";
        };
      in {
        ExecStart = "${zink}/bin/zink timestamp,tagId,batteryLevel,temperature";
        Restart = "on-failure";
      };
  };
}
#+end_src

It is under a corporate firewall, so security is relaxed for local network.
#+name: machine-ashmalko
#+begin_src nix
{
  services.avahi.interfaces = [ "enp0s31f6" ];
}
#+end_src

*** Local overlay
    As a responsible NixOS user, I refuse to install software blindly with =sudo make install=. That's why I should write my own nix-expressions. I keep them in my local overlay until they're merged upstream.

    The entry is just a set of all my packages in =nixpkgs-local/default.nix=:
#+begin_src nix :tangle nixpkgs-local/default.nix :noweb no-export :padline no
{ pkgs ? import <nixpkgs> { } }:

let
  callPackage = pkgs.lib.callPackageWith (pkgs // pkgs.xlibs // self);

  pythonPackages = pkgs.pythonPackages // rec {
    <<nixpkgs-local-python-packages>>
  };

  self = rec {
    <<nixpkgs-local-packages>>
  };

in self
#+end_src

You can install all packages to current user with:
#+begin_src sh
nix-env -f nixpkgs-local/default.nix -i
#+end_src

#+RESULTS:

To make package results testing better, I build them in isolated environment (for more info, see [[https://nixos.org/nixos/manual/options.html#opt-nix.useChroot][nixos manual]]):
#+name: nixos-section
#+begin_src nix
{
  nix.useSandbox = "relaxed";
}
#+end_src

Note that this is ="relaxed"= instead of =true=, because I have some packages that require network to build and thus are =__noChroot=.

** Services
*** Development setup

#+name: nixos-section
#+begin_src nix
{
  services.influxdb.enable = true;
  services.grafana = {
    enable = true;
    addr = "0.0.0.0";
    port = 3000;

    domain = "ashmalko.local";
    auth.anonymous.enable = true;
  };
}
#+end_src
*** Locate
    Update [[https://linux.die.net/man/1/locate][locate]] database daily.
#+name: nixos-section
#+begin_src nix
{
  services.locate = {
    enable = true;
    localuser = "rasen";
  };
}
#+end_src
*** OpenVPN
    All my computers are members of the VPN:
#+name: nixos-section
#+begin_src nix
{
  services.openvpn.servers = {
    kaa.config = ''
      client
      dev tap
      port 22
      proto tcp
      tls-client
      persist-key
      persist-tun
      ns-cert-type server
      remote vpn.kaa.org.ua
      ca /root/.vpn/ca.crt
      key /root/.vpn/alexey.shmalko.key
      cert /root/.vpn/alexey.shmalko.crt
    '';
  };
}
#+end_src

    Avahi is needed to allow resolution of =.local= names. For example, you can access this computer by =larry.local= if we meet at the same local network.
#+name: nixos-section
#+begin_src nix
{
  services.avahi = {
    enable = true;
    browseDomains = [ ];
    interfaces = [ "tap0" ];
    nssmdns = true;
    publish = {
      enable = true;
      addresses = true;
    };
  };
}
#+end_src

The following lines are needed to start avahi-daemon automatically. The default service is wantedBy "if-up.target" which doesn't seem to be activated (maybe because of wicd).

#+name: nixos-section
#+begin_src nix
{
  systemd.services.avahi-daemon.wantedBy = [ "multi-user.target" ];
  systemd.services.avahi-daemon.after = [ "openvpn-kaa.target" ];
}
#+end_src

*** SSH
#+name: nixos-section
#+begin_src nix
{
  services.openssh = {
    enable = true;
    passwordAuthentication = false;

    # Disable default firewall rules
    ports = [];
    listenAddresses = [
      { addr = "0.0.0.0"; port = 22; }
    ];
  };

  # allow ssh from VPN network only
  networking.firewall = {
    extraCommands = ''
      ip46tables -D INPUT -i tap0 -p tcp -m tcp --dport 22 -j ACCEPT 2> /dev/null || true
      ip46tables -A INPUT -i tap0 -p tcp -m tcp --dport 22 -j ACCEPT
    '';
  };
}
#+end_src

**** Mosh
[[https://mosh.mit.edu/][Mosh (mobile shell)]] is a cool addition to ssh.
#+name: nixos-section
#+begin_src nix
{
  programs.mosh.enable = true;
}
#+end_src

*** Gitolite
    I host some git repos on my machines:
#+name: nixos-section
#+begin_src nix
{
  services.gitolite = {
    enable = true;
    user = "git";
    adminPubkey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJhMhxIwZJgIY6CNSNEH+BetF/WCUtDFY2KTIl8LcvXNHZTh4ZMc5shTOS/ROT4aH8Awbm0NjMdW33J5tFMN8T7q89YZS8hbBjLEh8J04Y+kndjnllDXU6NnIr/AenMPIZxJZtSvWYx+f3oO6thvkZYcyzxvA5Vi6V1cGx6ni0Kizq/WV/mE/P1nNbwuN3C4lCtiBC9duvoNhp65PctQNohnKQs0vpQcqVlfqBsjQ7hhj2Fjg+Ofmt5NkL+NhKQNqfkYN5QyIAulucjmFAieKR4qQBABopl2F6f8D9IjY8yH46OCrgss4WTf+wxW4EBw/QEfNoKWkgVoZtxXP5pqAz rasen@Larry";
  };
}
#+end_src

*** dnsmasq

Use [[http://www.thekelleys.org.uk/dnsmasq/doc.html][dnsmasq]] as a DNS cache.

#+name: nixos-section
#+begin_src nix
{
  services.dnsmasq = {
    enable = true;

    # These are used in addition to resolv.conf
    servers = [ "8.8.8.8" "8.8.4.4" ];

    extraConfig = ''
      listen-address=127.0.0.1
      cache-size=1000

      no-negcache
    '';
  };

  # Put the text in /etc/resolv.conf.head
  #
  # That will prepend dnsmasq server to /etc/resolv.conf (dhcpcd-specific)
  environment.etc."resolv.conf.head".text = ''
    nameserver 127.0.0.1
  '';
}
#+end_src

*** Firewall

Enable firewall. This disables all ports and pings.

#+name: nixos-section
#+begin_src nix
{
  networking.firewall = {
    enable = true;
    allowPing = false;

    connectionTrackingModules = [];
    autoLoadConntrackHelpers = false;
  };
}
#+end_src

*** VirtualBox

#+name: nixos-section
#+begin_src nix
{
  virtualisation.virtualbox.host.enable = true;
  users.extraUsers.rasen.extraGroups = [ "vboxusers" ];
}
#+end_src

*** Postgres
    Local postgres database for development.
#+name: nixos-section
#+begin_src nix
{
  services.postgresql = {
    enable = true;
  };
}
#+end_src

** Mail setup
*** Mbsync
I use mbsync to sync my accounts and make them available offline.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.isyncUnstable
  ];
}
#+end_src

Config file is =.mbsyncrc=.
#+begin_src conf :tangle .mbsyncrc
MaildirStore local
Path ~/Mail/
Inbox ~/Mail/INBOX
SubFolders Verbatim

IMAPAccount gmail
Host imap.gmail.com
User rasen.dubi@gmail.com
PassCmd "pass imap.gmail.com/rasen.dubi@gmail.com"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

Channel sync-gmail-all
Master :gmail-remote:"[Gmail]/All Mail"
Slave :local:Personal/all
Create Both
SyncState *

Channel sync-gmail-sent
Master :gmail-remote:"[Gmail]/Sent Mail"
Slave :local:Personal/sent
Create Both
SyncState *

Group sync-gmail
Channel sync-gmail-all
Channel sync-gmail-sent

IMAPAccount kaaiot
Host imap.gmail.com
User ashmalko@kaaiot.io
PassCmd "pass imap.gmail.com/ashmalko@kaaiot.io"
SSLType IMAPS
AuthMechs *
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore kaaiot-remote
Account kaaiot

Channel sync-kaaiot-all
Master :kaaiot-remote:"[Gmail]/All Mail"
Slave :local:KaaIoT/all
Create Both
SyncState *

Channel sync-kaaiot-sent
Master :kaaiot-remote:"[Gmail]/Sent Mail"
Slave :local:KaaIoT/sent
Create Both
SyncState *

Group sync-kaaiot
Channel sync-kaaiot-all
Channel sync-kaaiot-sent

IMAPAccount cv
Host mail.cybervisiontech.com
User ashmalko
PassCmd "pass mail.cybervisiontech.com/ashmalko@cybervisiontech.com"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore cv-remote
Account cv

Channel sync-cv
Master :cv-remote:
Slave :local:Work/
Patterns * !Chats !Contacts !"Emailed Contacts"
Create Both
SyncState *
#+end_src

*** Dovecot
Dovecot serves fetched mail to gnus.
#+name: nixos-section
#+begin_src nix
{
  services.dovecot2 = {
    enable = true;
    enablePop3 = false;
    enableImap = true;
    mailLocation = "maildir:~/Mail:LAYOUT=fs";
  };

  # dovecot has some helpers in libexec (namely, imap).
  environment.pathsToLink = [ "/libexec/dovecot" ];
}
#+end_src

*** msmtp
Msmtp is used to send mail.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.msmtp
  ];
}
#+end_src

Config file is =.msmtprc=.
#+begin_src conf :tangle .msmtprc
defaults
auth on
tls on
tls_starttls off
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile ~/.msmtp.log

# Gmail
account gmail
host smtp.gmail.com
port 465
from rasen.dubi@gmail.com
user rasen.dubi@gmail.com
passwordeval "pass imap.gmail.com/rasen.dubi@gmail.com"

# KaaIoT
account kaaiot
host smtp.gmail.com
port 465
from ashmalko@kaaiot.io
user ashmalko@kaaiot.io
passwordeval "pass imap.gmail.com/ashmalko@kaaiot.io"

# CyberVision
account cv
host mail.cybervisiontech.com
port 465
from ashmalko@cybervisiontech.com
user ashmalko
passwordeval "pass mail.cybervisiontech.com/ashmalko@cybervisiontech.com"

# default
account default : gmail
#+end_src

*** notmuch
Notmuch is used for tagging.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.notmuch
  ];
}
#+end_src

Config file is =.notmuch-config=.
#+begin_src conf :tangle .notmuch-config
[user]
name=Alexey Shmalko
primary_email=rasen.dubi@gmail.com
other_email=ashmalko@cybervisiontech.com,ashmalko@kaaiot.io

[database]
path=/home/rasen/Mail

[new]
tags=new;
ignore=.mbsyncstate;.mbsyncstate.lock;.mbsyncstate.new;.mbsyncstate.journal;.uidvalidity;dovecot-uidlist;dovecot.index;dovecot.index.log;dovecot.index.log.2;dovecot.index.cache

[search]
exclude_tags=deleted;spam

[crypto]
gpg_path=gpg2
#+end_src

** Environment
*** General
    I definitely use X server:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.enable = true;
}
#+end_src

    Use English as my only supported locale:
#+name: nixos-section
#+begin_src nix
{
  i18n.supportedLocales = [ "en_US.UTF-8/UTF-8" ];
}
#+end_src

    Setup timezone:
#+name: nixos-section
#+begin_src nix
{
  time.timeZone = "Europe/Kiev";
}
#+end_src

*** Login manager
    I use SLiM. It stands for Simple Login Manager. It's fast and has little dependencies. The projects is dead since 2014, but still works fine, so I keep using it.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.displayManager.slim.enable = true;
}
#+end_src

*** Window manager
    I use [[http://awesome.naquadah.org/][awesome wm]]:

#+name: nixos-section
#+begin_src nix
{
  services.xserver.windowManager.awesome = {
    enable = true;
    luaModules = [ pkgs.luaPackages.luafilesystem pkgs.luaPackages.cjson ];
  };
}
#+end_src

    Disabling xterm makes awesome wm a default choice in slim:
#+name: nixos-section
#+begin_src nix
{
  services.xserver.desktopManager.xterm.enable = false;
}
#+end_src

    These packages are used by my awesome wm setup:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.wmname
    pkgs.kbdd
    pkgs.xclip
    pkgs.scrot
  ];
}
#+end_src

*** Keyboard
**** Layouts
    I use English and Ukrainian layouts. I also use Russian symbols, but they are on the third level.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.layout = "us,ua";
  services.xserver.xkbVariant = "workman,";

  # Use same config for linux console
  i18n.consoleUseXkbConfig = true;
}
#+end_src

    I toggle between them with either Caps Lock, or Menu key---I have two different keyboards, and one doesn't have Menu when Caps Lock is too far on the second. I never use Caps Lock--the feature, so it's nice to have Caps LED indicate alternate layouts.
#+name: nixos-section
#+begin_src nix
{
  services.xserver.xkbOptions = "grp:caps_toggle,grp:menu_toggle,grp_led:caps";
}
#+end_src

**** Layout indicator

     I use built-in awesome layout indicator.

**** Custom keyboard modification
#+begin_src fundamental :tangle .config/xkb/my
xkb_keymap {
  xkb_keycodes  { include "evdev+aliases(qwerty)"};
  xkb_types     { include "complete"};
  xkb_compat    { include "complete+ledcaps(group_lock)"};
  xkb_geometry  { include "pc(pc105)"};

  xkb_symbols "my" {
    include "pc+us+ru:2+inet(evdev)+group(menu_toggle)"
  };
};
#+end_src
**** Use Ctrl as Escape
Use left ctrl as escape when pressed on its own.

[[https://github.com/alols/xcape][XCAPE]] can do that with the next command.
#+begin_src sh
xcape -e 'Control_L=Escape'
#+end_src

(Of course, I need xcape in my system packages.)
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [ pkgs.xcape ];
}
#+end_src

*** Redshift
    Redshift adjusts the color temperature of the screen according to the position of the sun. That should improve my sleep.
#+name: nixos-section
#+begin_src nix
{
  services.redshift = {
    enable = true;
    latitude = "50.4500";
    longitude = "30.5233";
  };
}
#+end_src

** Look and Feel
*** Qt theme
    This makes apps look like in KDE:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.oxygen-icons5
  ];
}
#+end_src

#+name: nixos-section
#+begin_src nix
(let
  oldpkgs = import (pkgs.fetchFromGitHub {
    owner = "NixOS";
    repo = "nixpkgs-channels";
    rev = "1aa77d0519ae23a0dbef6cab6f15393cfadcc454";
    sha256 = "1gcd8938n3z0a095b0203fhxp6lddaw1ic1rl33q441m1w0i19jv";
  }) { config = config.nixpkgs.config; };
in {
  environment.systemPackages = [ oldpkgs.oxygen-gtk2 oldpkgs.oxygen-gtk3 ];

  environment.shellInit = ''
    export GTK_PATH=$GTK_PATH:${oldpkgs.oxygen_gtk}/lib/gtk-2.0
    export GTK2_RC_FILES=$GTK2_RC_FILES:${oldpkgs.oxygen_gtk}/share/themes/oxygen-gtk/gtk-2.0/gtkrc
  '';
})
#+end_src

**** TODO Find a way to make deadbeef use oxygen theme
The theme has some issues with deadbeef, so I install adwaita icons to make deadbeef usable.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gnome3.adwaita-icon-theme
  ];
}
#+end_src

*** Fonts

I'm not a font guru, so I just stuffed a bunch of random fonts here.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    enableCoreFonts = true;
    enableFontDir = true;
    enableGhostscriptFonts = false;

    fonts = with pkgs; [
      inconsolata
      corefonts
      dejavu_fonts
      source-code-pro
      ubuntu_font_family
      unifont
    ];
  };
}
#+end_src

** Applications
    Here go applications (almost) every normal user needs.
*** KDE apps
    I don't use full KDE but some apps are definitely nice.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gwenview
    pkgs.dolphin
    pkgs.kde4.kfilemetadata
    pkgs.filelight
    pkgs.shared_mime_info
  ];
}
#+end_src

    KDE apps may have issues with mime types without this:
#+name: nixos-section
#+begin_src nix
{
  environment.pathsToLink = [ "/share" ];
}
#+end_src

*** Firefox
    Though my default browser is google-chrome, it has issues with Java plugin, so I use firefox for that. I also need an older version of firefox as it has dropped Java support in recent versions.
#+name: nixos-section
#+begin_src nix
(let
  oldpkgs = import (pkgs.fetchFromGitHub {
    owner = "NixOS";
    repo = "nixpkgs-channels";
    rev = "1aa77d0519ae23a0dbef6cab6f15393cfadcc454";
    sha256 = "1gcd8938n3z0a095b0203fhxp6lddaw1ic1rl33q441m1w0i19jv";
  }) { config = config.nixpkgs.config; };
in {
  nixpkgs.config.firefox = {
    icedtea = true;
  };

  environment.systemPackages = [ pkgs.firefox-esr ];
})
#+end_src

*** Zathura
    Zathura is a cool document viewer with Vim-like bindings.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.zathura
  ];
}
#+end_src

Enable incremental search (Zathura's config goes to =~/.config/zathura/zathurarc=).
#+begin_src fundamental :tangle .config/zathura/zathurarc :padline no
set incremental-search true
#+end_src

*** Slock
    [[http://tools.suckless.org/slock/][Slock]] is a simple X display locker and should probably not crash as xscreensaver.

    Slock tries to disable OOM killer (so the locker is not killed when memory is low) and this requires a suid flag for executable. Otherwise, you get the following message.
#+begin_src fundamental
slock: unable to disable OOM killer. Make sure to suid or sgid slock.
#+end_src

#+name: nixos-section
#+begin_src nix
{
  security.wrappers = {
    slock = {
      source = "${pkgs.slock}/bin/slock";
    };
  };
}
#+end_src

*** Other applications
    Don't require additional setup.

#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.google-chrome
    pkgs.skype
    pkgs.libreoffice
    pkgs.qbittorrent
    pkgs.calibre
    pkgs.mnemosyne
    pkgs.deadbeef
    pkgs.wine
    pkgs.vlc
    pkgs.mplayer
    pkgs.smplayer
    pkgs.gparted
    pkgs.unetbootin
    pkgs.kvm
    pkgs.thunderbird
    pkgs.xss-lock
    pkgs.alarm-clock-applet
    pkgs.pass

    # Used by naga setup
    pkgs.xdotool
  ];
}
#+end_src

** Development
*** Editors
    I'm a seasoned Vim user, but I've switched to emacs now.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    (pkgs.vim_configurable.override { python3 = true; })
    pkgs.emacs
  ];
}
#+end_src

    The following packages are needed for emacs plugins:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.ycmd
    pkgs.rustracer
    pkgs.ditaa
    pkgs.jre
  ];
}
#+end_src

*** rxvt-unicode

   I use urxvt as my terminal emulator:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.rxvt_unicode
  ];
}
#+end_src

   Urxvt gets its setting from =.Xresources= file. If you ever want to reload it on-the-fly, type the following (or press =C-c C-c= if you're in emacs):
#+begin_src sh
xrdb ~/.Xresources
#+end_src

#+RESULTS:

**** General setup

    See [[http://pod.tst.eu/http://cvs.schmorp.de/rxvt-unicode/doc/rxvt.1.pod][rxvt-unicode documentation]] for the full reference.

#+begin_src conf-xdefaults :tangle .Xresources :padline no
urxvt.loginShell:         true
urxvt.saveLines:         65535
urxvt.urgentOnBell:       true

urxvt.scrollBar:         false
urxvt.scrollTtyOutput:   false
urxvt.scrollTtyKeypress:  true
urxvt.secondaryScroll:    true
#+end_src

    The next piece disables annoying message when pressing Ctrl+Shift:
#+begin_src conf-xdefaults :tangle .Xresources
urxvt.iso14755: False
#+end_src

    +Copy-paste with Ctrl+Shift+C, Ctrl+Shift+V:+

    From [[https://github.com/muennich/urxvt-perls][urxvt-perls]]:
    #+begin_quote
    Since version 9.20 rxvt-unicode natively supports copying to and pasting from the CLIPBOARD buffer with the Ctrl-Meta-c and Ctrl-Meta-v key bindings. The clipboard.autocopy setting is provided by the selection_to_clipboard extension shipped with rxvt-unicode.
    #+end_quote

    That means, I don't need perl extensions at all.

**** Font

    I use Terminus font.

#+name: nixos-section
#+begin_src nix
{
  fonts = {
    fonts = [
      pkgs.powerline-fonts
      pkgs.terminus_font
    ];
  };
}
#+end_src

#+begin_src conf-xdefaults :tangle .Xresources
URxvt.font: xft:Terminus:normal:size=12
#+end_src

**** Color theme

    I like Molokai color theme.

#+begin_src conf-xdefaults :tangle .Xresources
URxvt*background: #101010
URxvt*foreground: #d0d0d0
URxvt*color0:     #101010
URxvt*color1:     #960050
URxvt*color2:     #66aa11
URxvt*color3:     #c47f2c
URxvt*color4:     #30309b
URxvt*color5:     #7e40a5
URxvt*color6:     #3579a8
URxvt*color7:     #9999aa
URxvt*color8:     #303030
URxvt*color9:     #ff0090
URxvt*color10:    #80ff00
URxvt*color11:    #ffba68
URxvt*color12:    #5f5fee
URxvt*color13:    #bb88dd
URxvt*color14:    #4eb4fa
URxvt*color15:    #d0d0d0
#+end_src

*** fish

fish is a cool shell, but I haven't yet configured it properly to switch to it for my day-to-day work.

#+name: nixos-section
#+begin_src nix
{
  programs.fish.enable = true;
  users.defaultUserShell = pkgs.fish;
}
#+end_src

The next section goes to =.config/fish/functions/showqr.fish=. That's a function I use for displaying arbitrary text (mainly passwords stored with =pass=) as a QR code without any temporary files.

#+begin_src fish :tangle .config/fish/functions/showqr.fish
function showqr
  tr -d '\n' | qrencode -t png -o - | feh -
end
#+end_src

It uses =qrencode= package:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.qrencode
  ];
}
#+end_src

*** Zsh
    Zsh is my default shell:
#+name: nixos-section
#+begin_src nix
{
  programs.zsh.enable = true;
}
#+end_src

**** Prompt
    My prompt looks like this (though, the font is different; colors are also wrong at GitHub):

#+html: <pre style="color:#d0d0d0; background-color:#101010"><span style="color:#80ff00; font-weight:bold">rasen@Larry</span> <span style="color:#5f5fee; font-weight:bold">directory</span>(<span style="color:#bb88dd; font-weight:bold">master</span>|<span style="color:#30309b">+8</span>…) <span style="color:#5f5fee; font-weight:bold">%</span> command <span style="float:right">[0] 1:25</span></pre>

#+begin_src shell-script :tangle .zshrc :padline no
source $HOME/.zsh/git-prompt/zshrc.sh

PROMPT='%B%F{green}%n@%m%k %B%F{blue}%1~%b$(git_super_status) %B%F{blue}%# %b%f%k'
RPROMPT="[%?] %T"
#+end_src

    The =~/.zsh/git-prompt/= is a submodule, so don't forget to initialize it!
#+begin_src sh
git submodule update --init --recursive
#+end_src

**** Aliases
    Nothing special, but ~g=git~ is a real timesaver.
#+begin_src shell-script :tangle .zshrc
alias ls='ls --color=auto'
alias grep='grep --color=auto'

alias g="git"
#+end_src

**** PATH
    Install stuff in =~/.local/=; =~/bin/= is for my helper scripts (linked to =bin= directory in dotfiles repo).

#+begin_src shell-script :tangle .zshrc
export PATH="${HOME}/bin:${PATH}"
export PATH="${HOME}/.local/bin:${PATH}"

export LD_LIBRARY_PATH="${HOME}/.local/lib:${LD_LIBRARY_PATH}"
#+end_src

**** Other
    This part was written long time ago; I'm not sure I understand and use all of it:
#+begin_src shell-script :tangle .zshrc
autoload -U compinit promptinit
autoload -U colors
compinit
promptinit
colors

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory autocd
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/rasen/.zshrc'

zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

setopt correct
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt extendedglob

setopt listpacked

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

zstyle ':completion:*:functions' ignored-patters '_*'

xdvi() { command xdvi ${*:-*.dvi(om[1])} }
zstyle ':completion:*:*:xdvi:*' menu yes select
zstyle ':completion:*:*:xdvi:*' file-sort time

zstyle ':completion:*' squeeze-slashes true

# End of lines added by compinstall
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}

key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
#+end_src
    /TODO review this/

*** git
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.gitFull
    pkgs.gitg
  ];
}
#+end_src

    Basic info: my name, email, ui, editor, [[https://git-scm.com/blog/2010/03/08/rerere.html][rerere]].

#+begin_src gitconfig :tangle .gitconfig :padline no
[user]
    name = Alexey Shmalko
    email = rasen.dubi@gmail.com

[sendemail]
    smtpencryption = ssl
    smtpserver = smtp.gmail.com
    smtpuser = rasen.dubi@gmail.com
    smtpserverport = 465

[color]
    ui = true

[core]
    editor = vim

[push]
    default = simple

[pull]
    rebase = true

[rebase]
    autostash = true

[rerere]
    enabled = true
#+end_src

    Configure signing with [[https://www.gnupg.org/][gpg]].
#+begin_src gitconfig :tangle .gitconfig
[user]
    signingkey = EB3066C3

[gpg]
    program = gpg2

[push]
    gpgSign = if-asked
#+end_src

    I have *LOTS* of aliases:

#+begin_src gitconfig :tangle .gitconfig
[alias]
    cl  = clone
    gh-cl = gh-clone
    cr  = cr-fix
    p   = push
    pl  = pull
    f   = fetch
    fa  = fetch --all
    a   = add
    ap  = add -p
    d   = diff
    dl  = diff HEAD~ HEAD
    ds  = diff --staged
    l   = log --show-signature
    l1  = log -1
    lp  = log -p
    c   = commit
    ca  = commit --amend
    co  = checkout
    cb  = checkout -b
    cm  = checkout origin/master
    de  = checkout --detach
    fco = fetch-checkout
    br  = branch
    s   = status
    re  = reset --hard
    dp  = push origin HEAD:refs/drafts/master
    pp  = push origin HEAD:refs/publish/master
    r   = rebase
    rc  = rebase --continue
    ri  = rebase -i
    m   = merge
    t   = tag
    su  = submodule update --init --recursive
    bi  = bisect
    bg  = bisect good
    bb  = bisect bad
    bis = bisect start
    bir = bisect reset
#+end_src

Always push to github with ssh keys instead of login/password.

#+begin_src gitconfig :tangle .gitconfig
[url "git@github.com:"]
    pushInsteadOf = https://github.com/
#+end_src

    The next is needed for proper resolving of GHC submodules:

#+begin_src gitconfig :tangle .gitconfig
[url "git://github.com/ghc/packages-"]
    insteadOf = git://github.com/ghc/packages/
#+end_src

*** tmux
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.tmux
  ];
}
#+end_src

    I like =C-a= as a prefix.
#+begin_src conf-space :tangle .tmux.conf :padline no
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
#+end_src

    /TODO describe other settings/
#+begin_src conf-space :tangle .tmux.conf
# To make vim work properly
set -g default-terminal "screen-256color"

set -g status-keys vi
setw -g mode-keys vi

set -g history-limit 10000

# Start numbering from 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind-key s split-window
bind-key v split-window -h

bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

set-window-option -g automatic-rename
#+end_src

*** Embedded
    The following packages provide compiler, ARM cross-compiler, debugger, and terminal.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.minicom
    pkgs.openocd
    pkgs.telnet
  ];
}
#+end_src

    To allow user use openocd without sudo, we should add him to =plugdev= group and install openocd udev rules:

#+name: nixos-section
#+begin_src nix
{
  users.extraGroups.plugdev = { };
  users.extraUsers.rasen.extraGroups = [ "plugdev" "dialout" ];

  services.udev.packages = [ pkgs.openocd ];
}
#+end_src
*** Other terminal goodies
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.wget
    pkgs.htop
    pkgs.psmisc
    pkgs.zip
    pkgs.unzip
    pkgs.unrar
    pkgs.p7zip
    pkgs.irssi
    pkgs.bind
    pkgs.file
    pkgs.which
    pkgs.whois
    pkgs.gnupg
    pkgs.utillinuxCurses

    pkgs.patchelf

    pkgs.man-pages
    pkgs.stdman
    pkgs.posix_man_pages
    pkgs.stdmanpages

    pkgs.nix-repl
    pkgs.nox
    pkgs.python
    pkgs.python3
  ];
}
#+end_src

** Games
*** Steam
    We need the following package:
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.steam
  ];
}
#+end_src

    It's also required to enable 32-bit support for opengl and pulseaudio:
#+name: nixos-section
#+begin_src nix
{
  hardware.opengl.driSupport32Bit = true;
  hardware.pulseaudio.support32Bit = true;
}
#+end_src

*** Nethack
    I play nethack rarely, but still nice to have my setting in sync.
#+name: nixos-section
#+begin_src nix
{
  environment.systemPackages = [
    pkgs.nethack
  ];
}
#+end_src

   The following sets my default name, selects a dog, and disables auto-pickup; the last line makes interface a bit friendlier.

#+begin_src fundamental :tangle .nethackrc :padline no
OPTIONS=name:rasen
OPTIONS=role:monk, gender:male
OPTIONS=statushilites
OPTIONS=pettype:dog, dogname:Fido
OPTIONS=!autopickup
OPTIONS=lit_corridor, DECgraphics, showscore, showexp, time, color, hilite_pet
#+end_src

** Meta
*** Setup

    There is a =setup.sh= script in this directory. It just links all files to =$HOME=:
#+begin_src sh :shebang "#!/bin/sh" :tangle setup.sh :padline no
FILES=".vimrc .vim .nvimrc .nvim .gitconfig .zshrc .zsh .tmux.conf .Xresources .config/awesome .config/nvim .nethackrc .emacs.d .ssh bin .config/zathura .irssi .config/xkb .config/fish .msmtprc .notmuch-config .mbsyncrc"

DEST=$1

if [ -z "$DEST" ]; then
    DEST="$HOME"
fi

BASE=$(cd "$(dirname "$0")" && pwd)

ask_install() {
    FILENAME=$1

    LINK="$DEST/$FILENAME"
    TARGET="$BASE/$FILENAME"

    if [ -e $LINK ]; then
        echo "$LINK exists. Skipping..."
    else
        read -r -p "Link $LINK to $TARGET? [y/N] " response
        case $response in
            [yY][eE][sS]|[yY])
                ln -v -s "$TARGET" "$LINK"
                ;;
        esac
    fi
}

for FILE in $FILES; do
    ask_install $FILE
done
#+end_src

**** Install fisherman
     [[https://github.com/fisherman/fisherman][Fisherman]] is a plugin for fish.
#+begin_src sh :tangle setup.sh
if [ ! -e "$DEST/.config/fish/functions/fisher.fish" ]; then
    read -r -p "Install fisherman and all plugins? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY])
            curl -Lo "$DEST/.config/fish/functions/fisher.fish" --create-dirs \
                https://raw.githubusercontent.com/fisherman/fisherman/master/fisher.fish
            fish -c fisher
            ;;
    esac
fi
#+end_src

# Local Variables:
# org-src-preserve-indentation: t
# End:
